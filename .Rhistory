#install.packages("janitor")
library(janitor)
library(dplyr)
mydata <- read.csv("cleaned-data/toyota.csv")
View(mydata)
class(mydata$price)# verifier si la colonne price est bien de ype "caractere"
# Enlever les CHF dans la colonne "price"
mydata$price <- gsub("CHF", "", mydata$price)
# Convertir la colonne "title" en minuscules
mydata$title <- tolower(mydata$title)
# Supprimer les informations redondantes dans la colonne "title"
mydata$title <- gsub("toyota yaris", "", mydata$title)
# Remplacer les valeurs manquantes par une valeur par défaut
mydata$subtitle[is.na(mydata$subtitle)] <- "Inconnu"
# Convertir la colonne "title" en minuscules
mydata$subtitle <- tolower(mydata$subtitle)
library(stringr)
# Supprimer les espaces blancs en début et fin de chaîne
mydata$body.type <- trimws(mydata$body.type)
# Convertir les valeurs en minuscules
mydata$body.type <- tolower(mydata$body.type)
# Remplacer les valeurs erronées par des valeurs correctes
mydata$body.type[mydata$body.type == "hatchback"] <- "berline"
mydata$body.type[mydata$body.type == "sedan"] <- "berline"
mydata$body.type[mydata$body.type == "coupe"] <- "coupé"
mydata$body.type[mydata$body.type == "convertible"] <- "cabriolet"
# Nettoyer la colonne "kilométrage"
mydata$kilometers <- gsub("[^0-9]", "", mydata$kilometers)
typeof(mydata$kilometers)
class(mydata$kilometers)
mydata$kilometers
mydata[order(mydata$prix.neuf),]
mydata$prix.neuf[order(-mydata$prix.neuf),]
mydata$prix.neuf[order(mydata$prix.neuf),]
mydata[order(-mydata$prix.neuf),]$prix.neuf
mydata[order(mydata$prix.neuf),]$prix.neuf
#We load the necessary libraries to clean our data
library(tidyverse)
#We load the necessary libraries to clean our data
install.packages("tidyverse")
#We load the necessary libraries to clean our data
library(tidyverse)
library(janitor)
setwd("~/GitHub/Data_science/data")
setwd("~/GitHub/Data_science/data")
data <- read.csv("golf2.csv")
attach(data)
View(data)
typeof(data)
class(data)
library(lubridate)
price <- gsub("[^0-9]", "", price)
rm(price)
data$price <- parse_number(price)
data$kilometers <- parse_number(kilometers)
data$listing.id <- parse_number(listing.id)
data <- read.csv("golf2.csv")
data$price <- extract_numeric(price)
data$price <- parse_number(price)
data$kilometers <- parse_number(kilometers, locale = locale(grouping_mark = "'"))
data$listing.id <- parse_number(listing.id)
parse_number(consumption)
parse_number(consumption)[order(consumption),]
test <- parse_number(consumption)
test
test <- na_if(test, "-")
rlang::last_trace()
rlang::last_trace(drop = FALSE)
rm(test)
test <- na_if(consumption, "-")
test
test <- na_if(consumption, "")
test
test <- parse_number(test)
typeof(test)
rm(test)
test <- na_if(consumption, "-")
test
parse_number(test)
test <- parse_number(test)
typeof(test)
test[order(test),]
order(test)
test
str_sort(test)
test[order(test)]
test[order(test, decreasing = TRUE)]
consumption |>
na_if(consumption, "-")
consumption |>
na_if(y = "-")
parse_number()
parse_number(x)
parse_number(x = consumption)
test <- na_if(consumption, "-")
test <- parse_number(test)
rm(test)
test <- na_if(consumption, "-")
test <- parse_number(test)
test
test[order(test, decreasing = TRUE)]
data$consumption <- na_if(consumption, "-")
data$consumption <- parse_number(consumption)
test[order(test, decreasing = TRUE)]
test <- filter(>12)
test
test <- na_if(test, >12)
test <- na_if(test, 12:300)
length(test[x > 12])
length(test[test > 12])
length(test)
rm(test)
test <- na_if(consumption, "-")
length(test)
test <- consumption
length(test)
length(test[test > 12])
test
test <- parse_number(test)
rm(test)
test <- na_if(consumption, "-")
test <- parse_number(test)
test
length(test[test > 12])
test[order(test, decreasing = TRUE)]
test[test > 12]
test <- na_if(consumption, test[test > 12])
test[test > 12]
test > 12
test[test > 12]
test[test > 12] <- NA
test[test > 12]
test
test[order(test, decreasing = TRUE)]
test[order(test, decreasing = F)]
test[order(test, decreasing = TRUE)]
consumption[order(consumption = TRUE)]
consumption
data$consumption <- na_if(consumption, "-")
consumption
data$consumption
consumption
consumption <- na_if(consumption, "-")
consumption
consumption <- parse_number(consumption)
consumption
data$consumption[order(data$consumption = TRUE)]
data$consumption[order(data$consumption, descending = TRUE)]
data$consumption[order(data$consumption, decreasing = TRUE)]
data$consumption <- parse_number(data$consumption)
data$consumption[order(data$consumption, decreasing = TRUE)]
data$consumption
data$consumption[order(data$consumption, decreasing = TRUE)]
rm(consumption)
data$consumption[order(data$consumption, decreasing = TRUE)]
data$consumption[data$consumption > 12] <- NA
data$consumption[order(data$consumption, decreasing = TRUE)]
data$consumption[order(data$consumption, decreasing = F)]
unique(consumption)
unique(data$consumption)
order(unique(data$consumption))
data$consumption(order(unique(data$consumption)))
data$consumption[order(unique(data$consumption))]
data$consumption[order(data$consumption, decreasing = TRUE)]
unique(data$consumption[order(data$consumption, decreasing = TRUE)])
golf2 <- read.csv("golf2.csv")
data$consumption <- golf2$consumption
data$consumption
library(tidyverse)
library(lubridate)
setwd("~/GitHub/Data_science/data")
data <- read.csv("golf2.csv")
golf2 <- read.csv("golf2.csv")
data$price <- parse_number(price)
rm(data)
rm(test)
rm(golf2)
library(tidyverse)
library(lubridate)
setwd("~/GitHub/Data_science/data")
data <- read.csv("golf2.csv")
golf2 <- read.csv("golf2.csv")
data$price <- parse_number(price)
data$price <- parse_number(data$price)
data$kilometers <- parse_number(data$kilometers, locale = locale(grouping_mark = "'"))
data$listing.id <- parse_number(data$listing.id)
View(data)
data$consumption <- na_if(data$consumption, "-")
data$consumption <- parse_number(data$consumption)
unique(data$consumption[order(data$consumption)])
data$consumption[data$consumption > 12] <- NA
unique(data$consumption[order(data$consumption)])
data |>
group_by_all |>
count()
data |>
group_by_all() |>
count()
data$consumption |>
group_by_all() |>
count()
data$body.type |>
group_by_all() |>
count()
data$body.type |>
group_by_all() |>
data$consumption |>
group_by_all() |>
data$consumption |>
group_by_all() |>
count()
data$consumption |>
group_by_all() |>
count()
as.tibble(data$consumption)
as.tibble(data$consumption) |>
group_by_all() |>
count()
data$consumption |>
group_by_all() |>
count()
as.tibble(data$consumption) |>
group_by_all() |>
count() |>
print(n = 77)
as.tibble(data$body.type) |>
group_by_all() |>
count() |>
as.tibble(data$body.type) |>
group_by_all() |>
count() |>
as.tibble(data$body.type) |>
group_by_all() |>
count() |>
print(n = 10)
unique(data$power)
data$power <- na_if(data$power, "-")
test <- parse_number(data$power)
unique(test[order(data$power)])
typeof(test)
data$power <- parse_number(data$power)
unique(data$expertise[order(data$expertise)])
data$expertise
data$expertise["Non"]
data$expertise[data$expertise == "Non"]
data$expertise[data$expertise == "Non"] <- FALSE
data$expertise
data$expertise[data$expertise == "Oui"] <- TRUE
data$expertise
typeof(data$expertise)
as.logical(data$expertise)
data$expertise <- as.logical(data$expertise)
unique(data$accident[order(data$accident)])
unique(data$warranty[order(data$warranty)])
data$accident[data$accident == "Non"] <- FALSE
data$accident[data$accident == "Oui"] <- TRUE
data$accident <- as.logical(data$accident)
data$warranty[data$warranty == "Non"] <- FALSE
data$warranty[data$warranty == "Oui"] <- TRUE
data$warranty <- as.logical(data$warranty)
unique(data$new.price[order(data$new.price)])
data$new.price <- na_if(data$new.price, "Oui")
data$new.price <- na_if(data$new.price, "Non")
data$new.price <- parse_number(data$new.price)
data$price <- golf2$price
data$price <- parse_number(data$price, locale = locale(grouping_mark = "'"))
data$new.price <- golf2$new.price
data$new.price <- na_if(data$new.price, "Oui")
data$new.price <- na_if(data$new.price, "Non")
data$new.price <- parse_number(data$new.price, locale = locale(grouping_mark = "'"))
unique(data$new.price[order(data$new.price)])
data$new.price[data$new.price < 5000] <- NA
unique(data$new.price[order(data$new.price)])
test <- data[-c(1:4)]
View(test)
data <- data[-c(1:4)]
rm(test)
test <- as.Date(data$date)
test
unique(data$date[order(data$date)])
#We first remove one outlier (error)
data$date <- na_if(data$date, "2021.0000")
#We first remove one outlier (error)
data$date[data$date == "2021.0000"] <- NA
count(data$data == "2021.0000")
count(data$date == "2021.0000")
test <- data$date[-(2802)]
test
unique(test[order(test)])
data$date[2802]
data$date[2802] <- NA
#
rm(test)
test <- "2.1999"
as.Date(test)
test <- "02.1999"
as.Date(test)
test <- "01.02.1999"
as.Date(test)
test <- "01-02-1999"
as.Date(test)
test <- c("2.1999", "1.2004", "6.2019")
as.Date(test)
as.Date(test)
test <- c("02.1999", "01.2004", "06.2019")
as.Date(test)
test <- c("01-02.1999", "01-01.2004", "01-06.2019")
as.Date(test)
test <- c("01.02.1999", "01.01.2004", "01.06.2019")
as.Date(test)
test <- c("01-02-1999", "01-01-2004", "01-06-2019")
as.Date(test)
install.packages(parsedate)
install.packages(parsedate)
install.packages("parsedate")
library(parsedate)
parse_date(test)
as.Date(parse_date(test))
as.Date(parse_date(test)) |>
format((test), "%y-%d-%m")
test <- c("01.2.1999", "01.1.2004", "01.11.2019")
parse_date(test)
as.Date(parse_date(test)) |>
format((test), "%y-%d-%m")
as.Date(parse_date(test))
test <- c("01.2.1999", "01.7.2004", "01.11.2019")
parse_date(test)
as.Date(parse_date(test))
test <- paste("01.", data$date, sep = "")
test
class(data$date)
rm(test)
test <- as.character(data$date)
test
test <- paste("01.", test, sep = "")
test
rm(test)
test <- paste0("01.", data$date)
test
rm(test)
test <- dmy(paste0("01.", data$date))
test
rm(test)
test <- data$date
test
test <- data$date
test
parse_date(test)
