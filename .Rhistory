ggplot(data[order(data$new.price),]) +
geom_smooth(span = 0.1, mapping = aes(x = seq(new.price), y = new.price), color = "red", se = FALSE) +
ylim(c(0, 100000)) +
xlim(c(0, nrow(data))) +
geom_point(mapping = aes(x = seq(new.price), y = rel_dep*100000))
ggplot(data[order(data$new.price),]) +
geom_smooth(span = 0.1, mapping = aes(x = seq(new.price), y = new.price), color = "red", se = FALSE) +
ylim(c(0, 100000)) +
xlim(c(0, nrow(data))) +
geom_point(mapping = aes(x = seq(new.price), y = rel_dep*100000)) +
geom_smooth(span = 0.1, mapping = aes(x = seq(new.price), y = rel_dep*100000), color = "blue", se = FALSE) +
labs(x = "Observations sorted by new price", y = "New price | Relative depreciation * 100'000") +
ggtitle("Comparison of listing prices and new prices")
ggplot(data[order(data$new.price),]) +
geom_smooth(span = 0.1, mapping = aes(x = seq(new.price), y = new.price), color = "red", se = FALSE) +
ylim(c(0, 100000)) +
xlim(c(0, nrow(data))) +
geom_point(mapping = aes(x = seq(new.price), y = rel_dep*100000), size = 0.1) +
geom_smooth(span = 0.1, mapping = aes(x = seq(new.price), y = rel_dep*100000), color = "blue", se = FALSE) +
labs(x = "Observations sorted by new price", y = "New price | Relative depreciation * 100'000") +
ggtitle("Comparison of listing prices and new prices")
ggplot(data[order(data$new.price),]) +
geom_smooth(span = 0.1, mapping = aes(x = seq(new.price), y = new.price), color = "red", se = FALSE) +
ylim(c(0, max(new.price))) +
xlim(0, nrow(data)) +
geom_point(mapping = aes(x = seq(new.price), y = rel_dep*100000), size = 0.1) +
geom_smooth(span = 0.1, mapping = aes(x = seq(new.price), y = price), color = "blue", se = FALSE) +
geom_ribbon(aes(x = seq(new.price),
ymin = predict(loess(price ~ seq(price), span = 0.1)),
ymax = predict(loess(new.price ~ seq(price), span = 0.1))),
fill = "grey", alpha = 0.5) +
labs(x = "Observations sorted by new price", y = "New price | Price") +
ggtitle("Comparison of listing prices and new prices")
ggplot(data[order(data$new.price),]) +
geom_smooth(span = 0.1, mapping = aes(x = seq(new.price), y = new.price), color = "red", se = FALSE) +
ylim(c(0, max(new.price))) +
xlim(c(0, nrow(data))) +
geom_point(mapping = aes(x = seq(new.price), y = rel_dep*100000), size = 0.1) +
geom_smooth(span = 0.1, mapping = aes(x = seq(new.price), y = price), color = "blue", se = FALSE) +
geom_ribbon(aes(x = seq(new.price),
ymin = predict(loess(price ~ seq(price), span = 0.1)),
ymax = predict(loess(new.price ~ seq(price), span = 0.1))),
fill = "grey", alpha = 0.5) +
labs(x = "Observations sorted by new price", y = "New price | Price") +
ggtitle("Comparison of listing prices and new prices")
ggplot(data[order(data$new.price),]) +
geom_smooth(span = 0.1, mapping = aes(x = seq(new.price), y = new.price), color = "red", se = FALSE) +
ylim(0, max(new.price)) +
xlim(0, nrow(data)) +
geom_point(mapping = aes(x = seq(new.price), y = rel_dep*100000), size = 0.2) +
geom_smooth(span = 0.1, mapping = aes(x = seq(new.price), y = price), color = "blue", se = FALSE) +
geom_ribbon(aes(x = seq(new.price),
ymin = predict(loess(price ~ seq(price), span = 0.1)),
ymax = predict(loess(new.price ~ seq(price), span = 0.1))),
fill = "grey", alpha = 0.5) +
labs(x = "Observations sorted by new price", y = "New price | Price") +
ggtitle("Comparison of listing prices and new prices")
ggplot(data[order(data$new.price),]) +
geom_smooth(span = 0.1, mapping = aes(x = seq(new.price), y = new.price), color = "red", se = FALSE) +
ylim(0, max(new.price)) +
xlim(0, nrow(data)) +
geom_point(mapping = aes(x = seq(new.price), y = rel_dep*100000), size = 0.5) +
geom_smooth(span = 0.1, mapping = aes(x = seq(new.price), y = price), color = "blue", se = FALSE) +
geom_ribbon(aes(x = seq(new.price),
ymin = predict(loess(price ~ seq(price), span = 0.1)),
ymax = predict(loess(new.price ~ seq(price), span = 0.1))),
fill = "grey", alpha = 0.5) +
labs(x = "Observations sorted by new price", y = "New price | Price") +
ggtitle("Comparison of listing prices and new prices")
ggplot(data[order(data$new.price),]) +
geom_smooth(span = 0.1, mapping = aes(x = seq(new.price), y = new.price), color = "red", se = FALSE) +
ylim(0, max(new.price)) +
xlim(0, nrow(data)) +
geom_point(mapping = aes(x = seq(new.price), y = rel_dep*100000), size = 5) +
geom_smooth(span = 0.1, mapping = aes(x = seq(new.price), y = price), color = "blue", se = FALSE) +
geom_ribbon(aes(x = seq(new.price),
ymin = predict(loess(price ~ seq(price), span = 0.1)),
ymax = predict(loess(new.price ~ seq(price), span = 0.1))),
fill = "grey", alpha = 0.5) +
labs(x = "Observations sorted by new price", y = "New price | Price") +
ggtitle("Comparison of listing prices and new prices")
ggplot(data[order(data$new.price),]) +
geom_smooth(span = 0.1, mapping = aes(x = seq(new.price), y = new.price), color = "red", se = FALSE) +
ylim(0, max(new.price)) +
xlim(0, nrow(data)) +
geom_point(mapping = aes(x = seq(new.price), y = rel_dep*100000), size = 1) +
geom_smooth(span = 0.1, mapping = aes(x = seq(new.price), y = price), color = "blue", se = FALSE) +
geom_ribbon(aes(x = seq(new.price),
ymin = predict(loess(price ~ seq(price), span = 0.1)),
ymax = predict(loess(new.price ~ seq(price), span = 0.1))),
fill = "grey", alpha = 0.5) +
labs(x = "Observations sorted by new price", y = "New price | Price") +
ggtitle("Comparison of listing prices and new prices")
ggplot(data[order(data$new.price),]) +
geom_smooth(span = 0.1, mapping = aes(x = seq(new.price), y = new.price), color = "red", se = FALSE) +
ylim(0, max(new.price)) +
xlim(0, nrow(data)) +
geom_point(mapping = aes(x = seq(new.price), y = rel_dep*100000)) +
geom_smooth(span = 0.1, mapping = aes(x = seq(new.price), y = price), color = "blue", se = FALSE) +
geom_ribbon(aes(x = seq(new.price),
ymin = predict(loess(price ~ seq(price), span = 0.1)),
ymax = predict(loess(new.price ~ seq(price), span = 0.1))),
fill = "grey", alpha = 0.5) +
labs(x = "Observations sorted by new price", y = "New price | Price") +
ggtitle("Comparison of listing prices and new prices")
ggplot(data[order(data$new.price),]) +
geom_smooth(span = 0.1, mapping = aes(x = seq(new.price), y = new.price), color = "red", se = FALSE) +
ylim(0, max(new.price)) +
xlim(0, nrow(data)) +
geom_point(mapping = aes(x = seq(new.price), y = rel_dep*100000), size = 1) +
geom_smooth(span = 0.1, mapping = aes(x = seq(new.price), y = price), color = "blue", se = FALSE) +
geom_ribbon(aes(x = seq(new.price),
ymin = predict(loess(price ~ seq(price), span = 0.1)),
ymax = predict(loess(new.price ~ seq(price), span = 0.1))),
fill = "grey", alpha = 0.5) +
labs(x = "Observations sorted by new price", y = "New price | Price") +
ggtitle("Comparison of listing prices and new prices")
ggplot(data[order(data$new.price),]) +
geom_smooth(span = 0.1, mapping = aes(x = seq(new.price), y = new.price), color = "red", se = FALSE) +
ylim(0, 100000) +
xlim(0, nrow(data)) +
geom_point(mapping = aes(x = seq(new.price), y = rel_dep*100000), size = 1) +
geom_smooth(span = 0.1, mapping = aes(x = seq(new.price), y = rel_dep*100000), color = "blue", se = FALSE) +
labs(x = "Observations sorted by new price", y = "New price | Relative depreciation * 100'000") +
ggtitle("Comparison of listing prices and new prices")
summary(rel_dep)
var(rel_dep)
sd(rel_dep)
mad(rel_dep)
sd(rel_dep*100000)
var(rel_dep*100000)
summary(depreciation)
sd(depreciation)
sd(rel_dep)
summary(rel_dep)
sd(rel_dep)
summary(depreciation)
sd(depreciation)
ggplot(data[order(data$new.price),]) +
geom_smooth(span = 0.1, mapping = aes(x = seq(new.price), y = new.price), color = "red", se = FALSE) +
ylim(0, 100000) +
xlim(0, nrow(data)) +
geom_point(mapping = aes(x = seq(new.price), y = rel_dep*100000), size = 1, alpha = 0.5) +
geom_smooth(span = 0.1, mapping = aes(x = seq(new.price), y = rel_dep*100000), color = "blue", se = FALSE) +
labs(x = "Observations sorted by new price", y = "New price | Relative depreciation * 100'000") +
ggtitle("Comparison of listing prices and new prices")
ggplot(data[order(data$new.price),]) +
geom_smooth(span = 0.1, mapping = aes(x = seq(new.price), y = new.price), color = "red", se = FALSE) +
ylim(0, 100000) +
xlim(0, nrow(data)) +
geom_point(mapping = aes(x = seq(new.price), y = rel_dep*100000), size = 1, alpha = 0.5, stroke = 0) +
geom_smooth(span = 0.1, mapping = aes(x = seq(new.price), y = rel_dep*100000), color = "blue", se = FALSE) +
labs(x = "Observations sorted by new price", y = "New price | Relative depreciation * 100'000") +
ggtitle("Comparison of listing prices and new prices")
ggplot(data[order(data$new.price),]) +
geom_smooth(span = 0.1, mapping = aes(x = seq(new.price), y = new.price), color = "red", se = FALSE) +
ylim(0, max(new.price)) +
xlim(0, nrow(data)) +
geom_point(mapping = aes(x = seq(new.price), y = rel_dep*100000), size = 1, alpha = 0.5, stroke = 0) +
geom_smooth(span = 0.1, mapping = aes(x = seq(new.price), y = price), color = "blue", se = FALSE) +
geom_ribbon(aes(x = seq(new.price),
ymin = predict(loess(price ~ seq(price), span = 0.1)),
ymax = predict(loess(new.price ~ seq(price), span = 0.1))),
fill = "grey", alpha = 0.5) +
labs(x = "Observations sorted by new price", y = "New price | Price") +
ggtitle("Comparison of listing prices and new prices")
ggplot(data[order(data$new.price),]) +
geom_smooth(span = 0.1, mapping = aes(x = seq(new.price), y = new.price), color = "red", se = FALSE) +
ylim(0, max(new.price)) +
xlim(0, nrow(data)) +
geom_smooth(span = 0.1, mapping = aes(x = seq(new.price), y = price), color = "blue", se = FALSE) +
geom_ribbon(aes(x = seq(new.price),
ymin = predict(loess(price ~ seq(price), span = 0.1)),
ymax = predict(loess(new.price ~ seq(price), span = 0.1))),
fill = "grey", alpha = 0.5) +
labs(x = "Observations sorted by new price", y = "New price | Price") +
ggtitle("Comparison of listing prices and new prices")
ggplot(data[order(data$new.price),]) +
geom_smooth(span = 0.1, mapping = aes(x = seq(new.price), y = new.price), color = "red", se = FALSE) +
ylim(0, 100000) +
xlim(0, nrow(data)) +
geom_point(mapping = aes(x = seq(new.price), y = rel_dep*100000), size = 1, alpha = 0.5, stroke = 0) +
geom_smooth(span = 0.1, mapping = aes(x = seq(new.price), y = rel_dep*100000), color = "blue", se = FALSE) +
labs(x = "Observations sorted by new price", y = "New price | Relative depreciation * 100'000") +
ggtitle("Comparison of listing prices and new prices")
model3 <- lm(rel_dep ~ power + consumption + wagon + cabriolet + diesel + hybrid + electric + manual + awd)
summary(model3)
ggplot(data[order(data$new.price),]) +
geom_smooth(span = 0.1, mapping = aes(x = seq(consumption), y = new.price), color = "red", se = FALSE) +
ylim(0, 100000) +
xlim(0, nrow(data)) +
geom_point(mapping = aes(x = seq(consumption), y = rel_dep*100000), size = 1, alpha = 0.5, stroke = 0) +
geom_smooth(span = 0.1, mapping = aes(x = seq(consumption), y = rel_dep*100000), color = "blue", se = FALSE) +
labs(x = "Observations sorted by new price", y = "New price | Relative depreciation * 100'000") +
ggtitle("Comparison of listing prices and new prices")
ggplot(data[order(data$new.price),]) +
geom_smooth(span = 0.1, mapping = aes(x = seq(new.price), y = new.price), color = "red", se = FALSE) +
ylim(0, max(new.price)) +
xlim(0, nrow(data)) +
geom_smooth(span = 0.1, mapping = aes(x = seq(new.price), y = price), color = "blue", se = FALSE) +
geom_ribbon(aes(x = seq(new.price),
ymin = predict(loess(price ~ seq(price), span = 0.1)),
ymax = predict(loess(new.price ~ seq(price), span = 0.1))),
fill = "grey", alpha = 0.5) +
labs(x = "Observations sorted by new price", y = "New price | Price") +
ggtitle("Comparison of listing prices and new prices")
ggplot(data[order(data$new.price),]) +
geom_smooth(span = 0.1, mapping = aes(x = seq(new.price), y = new.price), color = "red", se = FALSE) +
ylim(0, 100000) +
xlim(0, nrow(data)) +
geom_point(mapping = aes(x = seq(new.price), y = rel_dep*100000), size = 1, alpha = 0.5, stroke = 0) +
geom_smooth(span = 0.1, mapping = aes(x = seq(new.price), y = rel_dep*100000), color = "blue", se = FALSE) +
labs(x = "Observations sorted by new price", y = "New price | Relative depreciation * 100'000") +
ggtitle("Comparison of listing prices and new prices")
ggplot(data[order(data$new.price),]) +
geom_smooth(span = 0.1, mapping = aes(x = seq(new.price), y = new.price), color = "red", se = FALSE) +
ylim(0, 100000) +
xlim(0, nrow(data)) +
geom_point(mapping = aes(x = seq(new.price), y = rel_dep*100000), size = 1, alpha = 0.5, stroke = 0) +
geom_smooth(span = 0.1, mapping = aes(x = seq(new.price), y = rel_dep*100000), color = "blue", se = FALSE) +
labs(x = "Observations sorted by new price", y = "New price | Relative depreciation * 100'000") +
ggtitle("Comparison of relative depreciation and new prices")
ggplot(data[order(data$new.price),]) +
geom_smooth(span = 0.1, mapping = aes(x = seq(new.price), y = new.price), color = "red", se = FALSE) +
ylim(0, 100000) +
xlim(0, nrow(data)) +
geom_point(mapping = aes(x = seq(new.price), y = rel_dep*100000), size = 1, alpha = 0.5, stroke = 0) +
geom_smooth(span = 0.1, mapping = aes(x = seq(new.price), y = rel_dep*100000), color = "blue", se = FALSE) +
labs(x = "Observations sorted by new price", y = "New price | Relative depreciation * 100'000") +
ggtitle("Comparison of relative depreciation (blue) and new prices (red)")
ggplot(data[order(data$new.price),]) +
geom_smooth(span = 0.1, mapping = aes(x = seq(new.price), y = new.price), color = "red", se = FALSE) +
ylim(0, 100000) +
xlim(0, nrow(data)) +
geom_point(mapping = aes(x = seq(new.price), y = rel_dep*100000), size = 1, alpha = 0.5, stroke = 0) +
geom_smooth(span = 0.1, mapping = aes(x = seq(new.price), y = rel_dep*100000), color = "blue", se = FALSE) +
labs(x = "Observations sorted by new price", y = "New price | Relative depreciation * 100'000") +
ggtitle("Comparison of new prices (red) and relative depreciation (blue)")
summary(rel_dep)
sd(rel_dep)
model2 <- lm(depreciation ~ power + new.price + consumption + wagon + cabriolet + diesel + hybrid + electric + manual + awd)
summary(model2)
ggplot(data, mapping = aes(depreciation, new.price)) +
geom_point() +
geom_smooth()
# new price
summary(lm(depreciation ~ new.price))
# price
summary(lm(depreciation ~ price))
ggplot(data, mapping = aes(depreciation, price)) +
geom_point() +
geom_smooth()
# diesel
table(fuel.type)
summary(lm(depreciation ~ diesel))
ggplot(data, mapping = aes(depreciation, diesel)) +
geom_point()
# wagon
table(body.type)
ggplot(data, mapping = aes(depreciation, cabriolet)) +
geom_point()
summary(lm(depreciation ~ cabriolet))
# wagon
table(body.type)
# diesel
table(fuel.type)
summary(lm(depreciation ~ electric))
ggplot(data, mapping = aes(depreciation, electric)) +
geom_point()
# drivetrain
table(awd)
# drivetrain
table(manual)
model2 <- lm(depreciation ~ power + new.price + consumption + wagon + cabriolet + diesel + hybrid + electric + manual + awd)
summary(model2)
model1 <- lm(depreciation ~ price + new.price + kilometers + vehicle.age + power + consumption + expertise + warranty + wagon + diesel + hybrid + manual + awd)
summary(model1)
# expertise
summary(lm(depreciation ~ expertise))
ggplot(data, mapping = aes(depreciation, expertise)) +
geom_point() +
geom_smooth()
ggplot(data, mapping = aes(depreciation, power)) +
geom_point() +
geom_smooth()
ggplot(data, mapping = aes(depreciation, expertise)) +
geom_point(color = expertise) +
# hybrid
table(fuel.type)
ggplot(data, mapping = aes(depreciation, expertise)) +
geom_point(mapping = aes(color = expertise)) +
# hybrid
table(fuel.type)
ggplot(data, mapping = aes(depreciation, expertise), color = expertise) +
geom_point() +
# hybrid
table(fuel.type)
rlang::last_trace()
ggplot(data, mapping = aes(depreciation, expertise, color = expertise)) +
geom_point() +
# hybrid
table(fuel.type)
ggplot(data, mapping = aes(depreciation, expertise)) +
geom_point() +
# hybrid
table(fuel.type)
ggplot(data, mapping = aes(depreciation, expertise)) +
geom_point(aes(color = expertise))
ggplot(data, mapping = aes(depreciation, expertise)) +
geom_point()
# warranty
summary(lm(depreciation ~ warranty))
ggplot(data, mapping = aes(depreciation, warranty)) +
geom_point()
# expertise
summary(lm(depreciation ~ expertise))
ggplot(data, mapping = aes(depreciation, expertise)) +
geom_point()
summary(lm(depreciation ~ price))
ggplot(data) +
geom_point(mapping = aes(depreciation, price)) +
geom_smooth(mapping = aes(depreciation, price))
ggplot(lm(depreciation ~ price), aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0, color = "red", linewidth = 1) +
geom_smooth()
ggplot(data) +
geom_point(mapping = aes(depreciation, price)) +
geom_smooth(mapping = aes(depreciation, price))
# price
summary(lm(rel_dep ~ price))
ggplot(data) +
geom_point(mapping = aes(rel_dep, price)) +
geom_smooth(mapping = aes(rel_dep, price))
# price
summary(lm(rel_dep ~ price))
ggplot(data) +
geom_point(mapping = aes(rel_dep, price)) +
geom_smooth(mapping = aes(rel_dep, price))
# vehicle age
summary(lm(depreciation ~ vehicle.age))
ggplot(data, mapping = aes(depreciation, vehicle.age)) +
geom_point() +
geom_smooth()
# new price
summary(lm(depreciation ~ new.price))
ggplot(data, mapping = aes(depreciation, new.price)) +
geom_point() +
geom_smooth()
# new price
summary(lm(rel_dep ~ new.price))
ggplot(data, mapping = aes(rel_dep, new.price)) +
geom_point() +
geom_smooth()
# price
summary(lm(rel_dep ~ price))
ggplot(data, mapping = aes(rel_dep, price)) +
geom_point() +
geom_smooth()
# vehicle age
summary(lm(rel_dep ~ vehicle.age))
ggplot(data, mapping = aes(rel_dep, vehicle.age)) +
geom_point() +
geom_smooth()
# kilometers
summary(lm(rel_dep ~ kilometers))
ggplot(data, mapping = aes(rel_dep, kilometers)) +
geom_point() +
geom_smooth()
# vehicle age
summary(lm(rel_dep ~ vehicle.age))
ggplot(data, mapping = aes(rel_dep, vehicle.age)) +
geom_point() +
geom_smooth()
# power
summary(lm(rel_dep ~ power))
ggplot(data, mapping = aes(rel_dep, power)) +
geom_point() +
geom_smooth()
# consumption
summary(lm(rel_dep ~ consumption))
ggplot(data, mapping = aes(rel_dep, consumption)) +
geom_point() +
geom_smooth()
# expertise
summary(lm(rel_dep ~ expertise))
ggplot(data, mapping = aes(rel_dep, expertise)) +
geom_point()
# warranty
summary(lm(rel_dep ~ warranty))
ggplot(data, mapping = aes(rel_dep, warranty)) +
geom_point()
summary(lm(rel_dep ~ hybrid))
ggplot(data, mapping = aes(rel_dep, hybrid)) +
geom_point()
summary(lm(rel_dep ~ diesel))
ggplot(data, mapping = aes(rel_dep, diesel)) +
geom_point()
summary(lm(rel_dep ~ wagon))
ggplot(data, mapping = aes(rel_dep, wagon)) +
geom_point()
# transmission
summary(lm(rel_dep ~ manual))
ggplot(data, mapping = aes(rel_dep, manual)) +
geom_point()
# drivetrain
summary(lm(rel_dep ~ awd))
ggplot(data, mapping = aes(rel_dep, awd)) +
geom_point()
model3 <- lm(rel_dep ~ price + new.price + kilometers + vehicle.age + power + consumption + expertise + warranty + wagon + diesel + hybrid + manual + awd) # equivalent to model1
summary(model3)
model4 <- lm(depreciation ~ power + new.price + consumption + wagon + diesel + hybrid + manual + awd) # equivalent to model2
summary(model4)
model3 <- lm(rel_dep ~ price + new.price + kilometers + vehicle.age + power + consumption + expertise + warranty + wagon + diesel + hybrid + manual + awd) # equivalent to model1
summary(model3)
ggplot(data[order(data$new.price),]) +
geom_smooth(span = 0.1, mapping = aes(x = seq(new.price), y = new.price), color = "red", se = FALSE) +
ylim(0, 100000) +
xlim(0, nrow(data)) +
geom_point(mapping = aes(x = seq(new.price), y = rel_dep*100000), size = 1, alpha = 0.5, stroke = 0) +
geom_smooth(span = 0.1, mapping = aes(x = seq(new.price), y = rel_dep*100000), color = "blue", se = FALSE) +
labs(x = "Observations sorted by new price", y = "New price | Relative depreciation * 100'000") +
ggtitle("Comparison of new prices (red) and relative depreciation (blue)")
# Prices vs depreciation
ggplot(data[order(data$price),]) +
geom_smooth(span = 0.1, mapping = aes(x = seq(price), y = price), color = "red", se = FALSE) +
ylim(0, 100000) +
xlim(0, nrow(data)) +
geom_point(mapping = aes(x = seq(price), y = rel_dep*100000), size = 1, alpha = 0.5, stroke = 0) +
geom_smooth(span = 0.1, mapping = aes(x = seq(price), y = rel_dep*100000), color = "blue", se = FALSE) +
labs(x = "Observations sorted by new price", y = "New price | Relative depreciation * 100'000") +
ggtitle("Comparison of new prices (red) and relative depreciation (blue)")
# Prices vs depreciation
ggplot(data[order(data$price),]) +
geom_smooth(span = 0.1, mapping = aes(x = seq(price), y = price), color = "red", se = FALSE) +
ylim(0, 100000) +
xlim(0, nrow(data)) +
geom_point(mapping = aes(x = seq(price), y = rel_dep*100000), size = 1, alpha = 0.5, stroke = 0) +
geom_smooth(span = 0.1, mapping = aes(x = seq(price), y = rel_dep*100000), color = "blue", se = FALSE) +
labs(x = "Observations sorted by price", y = "Price | Relative depreciation * 100'000") +
ggtitle("Comparison of prices (red) and relative depreciation (blue)")
# Depreciation
cor(price, new.price)
# We will make a correlation matrix to check which variables are correlated.
cor_matrix <- cor(select(data, c("new.price", "price", "kilometers", "vehicle.age", "power", "consumption", "expertise", "warranty", "wagon", "diesel", "hybrid", "manual", "awd"), use = complete.obs))
# We will make a correlation matrix to check which variables are correlated.
cor_matrix <- cor(select(data, c("new.price", "price", "kilometers", "vehicle.age", "power", "consumption", "expertise", "warranty", "wagon", "diesel", "hybrid", "manual", "awd"), use = "complete.obs"))
select(data, c("new.price", "price", "kilometers", "vehicle.age", "power", "consumption", "expertise", "warranty", "wagon", "diesel", "hybrid", "manual", "awd")
# We will make a correlation matrix to check which variables are correlated.
cor_matrix <- cor(select(data, c("new.price", "price", "kilometers", "vehicle.age", "power", "consumption", "expertise", "warranty", "wagon", "diesel", "hybrid", "manual", "awd")), use = "complete.obs")
cor_matrix <- cor(select(data, c("new.price", "price", "kilometers", "vehicle.age", "power", "consumption", "expertise", "warranty", "wagon", "diesel", "hybrid", "manual", "awd")), use = "complete.obs")
cor_matrix
corrplot(cor_matrix)
library(corrplot)
corrplot(cor_matrix)
cor_matrix <- cor(select(data, c("depreciation", "rel_dep", "new.price", "price", "kilometers", "vehicle.age", "power", "consumption", "expertise", "warranty", "wagon", "diesel", "hybrid", "manual", "awd")), use = "complete.obs")
cor_matrix
corrplot(cor_matrix)
# Prices vs depreciation
ggplot(data[order(data$price),]) +
geom_smooth(span = 0.1, mapping = aes(x = seq(price), y = price), color = "red", se = FALSE) +
ylim(0, 100000) +
xlim(0, nrow(data)) +
geom_point(mapping = aes(x = seq(price), y = rel_dep*100000), size = 1, alpha = 0.5, stroke = 0) +
geom_smooth(span = 0.1, mapping = aes(x = seq(price), y = rel_dep*100000), color = "blue", se = FALSE) +
labs(x = "Observations sorted by price", y = "Price | Relative depreciation * 100'000") +
ggtitle("Comparison of prices (red) and relative depreciation (blue)")
# New prices vs depreciation
ggplot(data[order(data$new.price),]) +
geom_smooth(span = 0.1, mapping = aes(x = seq(new.price), y = new.price), color = "red", se = FALSE) +
ylim(0, 100000) +
xlim(0, nrow(data)) +
geom_point(mapping = aes(x = seq(new.price), y = rel_dep*100000), size = 1, alpha = 0.5, stroke = 0) +
geom_smooth(span = 0.1, mapping = aes(x = seq(new.price), y = rel_dep*100000), color = "blue", se = FALSE) +
labs(x = "Observations sorted by new price", y = "New price | Relative depreciation * 100'000") +
ggtitle("Comparison of new prices (red) and relative depreciation (blue)")
corrplot(cor_matrix)
# new price
summary(lm(rel_dep ~ new.price))
ggplot(data, mapping = aes(rel_dep, new.price)) +
geom_point() +
geom_smooth()
model3 <- lm(rel_dep ~ price + new.price + kilometers + vehicle.age + power + consumption + expertise + warranty + wagon + diesel + hybrid + manual + awd) # equivalent to model1
summary(model3)
summary(model4)
corrplot(cor_matrix)
# Relative depreciation is clearly negatively correlated with price, but surprisingly is uncorrelated with new price.
# Obviously relative depreciation is strongly dependent on vehicle.age and kilometers, since these are the main factors that determine a vehicle's depreciation.
summary(lm(rel_dep ~ vehicle.age + kilometers))
cor_matrix
# 78% of rel_dep's variance can be explained by just vehicle.age and kilometers (adjusted R squared).
# Let's investigate if any immovable factors have a significant effect on relative depreciation.
order(cor_matrix[2,])
# 78% of rel_dep's variance can be explained by just vehicle.age and kilometers (adjusted R squared).
# Let's investigate if any immovable factors have a significant effect on relative depreciation.
order(cor_matrix)
# 78% of rel_dep's variance can be explained by just vehicle.age and kilometers (adjusted R squared).
# Let's investigate if any immovable factors have a significant effect on relative depreciation.
order(cor_matrix[2,])
# 78% of rel_dep's variance can be explained by just vehicle.age and kilometers (adjusted R squared).
# Let's investigate if any immovable factors have a significant effect on relative depreciation.
order(cor_matrix[2,])
# 78% of rel_dep's variance can be explained by just vehicle.age and kilometers (adjusted R squared).
# Let's investigate if any immovable factors have a significant effect on relative depreciation.
order(-cor_matrix[2,])
cor_matrix[2, order(-cor_matrix[2,])]
cor_matrix[2, order(-abs(cor_matrix[2,]))]
t.test(vehicle.age, vehicle.age[hybrid == TRUE])
summary(vehicle.age)
summary(vehicle.age[hybrid == TRUE])
t.test(vehicle.age, vehicle.age[hybrid == TRUE])
t.test(kilometers, kilometers[hybrid == TRUE])
