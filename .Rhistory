labs(x = "Observations sorted by new price", y = "New price | Relative depreciation * 100'000") +
ggtitle("Comparison of listing prices and new prices")
model3 <- lm(rel_dep ~ power + consumption + wagon + cabriolet + diesel + hybrid + electric + manual + awd)
summary(model3)
ggplot(data[order(data$new.price),]) +
geom_smooth(span = 0.1, mapping = aes(x = seq(consumption), y = new.price), color = "red", se = FALSE) +
ylim(0, 100000) +
xlim(0, nrow(data)) +
geom_point(mapping = aes(x = seq(consumption), y = rel_dep*100000), size = 1, alpha = 0.5, stroke = 0) +
geom_smooth(span = 0.1, mapping = aes(x = seq(consumption), y = rel_dep*100000), color = "blue", se = FALSE) +
labs(x = "Observations sorted by new price", y = "New price | Relative depreciation * 100'000") +
ggtitle("Comparison of listing prices and new prices")
ggplot(data[order(data$new.price),]) +
geom_smooth(span = 0.1, mapping = aes(x = seq(new.price), y = new.price), color = "red", se = FALSE) +
ylim(0, max(new.price)) +
xlim(0, nrow(data)) +
geom_smooth(span = 0.1, mapping = aes(x = seq(new.price), y = price), color = "blue", se = FALSE) +
geom_ribbon(aes(x = seq(new.price),
ymin = predict(loess(price ~ seq(price), span = 0.1)),
ymax = predict(loess(new.price ~ seq(price), span = 0.1))),
fill = "grey", alpha = 0.5) +
labs(x = "Observations sorted by new price", y = "New price | Price") +
ggtitle("Comparison of listing prices and new prices")
ggplot(data[order(data$new.price),]) +
geom_smooth(span = 0.1, mapping = aes(x = seq(new.price), y = new.price), color = "red", se = FALSE) +
ylim(0, 100000) +
xlim(0, nrow(data)) +
geom_point(mapping = aes(x = seq(new.price), y = rel_dep*100000), size = 1, alpha = 0.5, stroke = 0) +
geom_smooth(span = 0.1, mapping = aes(x = seq(new.price), y = rel_dep*100000), color = "blue", se = FALSE) +
labs(x = "Observations sorted by new price", y = "New price | Relative depreciation * 100'000") +
ggtitle("Comparison of listing prices and new prices")
ggplot(data[order(data$new.price),]) +
geom_smooth(span = 0.1, mapping = aes(x = seq(new.price), y = new.price), color = "red", se = FALSE) +
ylim(0, 100000) +
xlim(0, nrow(data)) +
geom_point(mapping = aes(x = seq(new.price), y = rel_dep*100000), size = 1, alpha = 0.5, stroke = 0) +
geom_smooth(span = 0.1, mapping = aes(x = seq(new.price), y = rel_dep*100000), color = "blue", se = FALSE) +
labs(x = "Observations sorted by new price", y = "New price | Relative depreciation * 100'000") +
ggtitle("Comparison of relative depreciation and new prices")
ggplot(data[order(data$new.price),]) +
geom_smooth(span = 0.1, mapping = aes(x = seq(new.price), y = new.price), color = "red", se = FALSE) +
ylim(0, 100000) +
xlim(0, nrow(data)) +
geom_point(mapping = aes(x = seq(new.price), y = rel_dep*100000), size = 1, alpha = 0.5, stroke = 0) +
geom_smooth(span = 0.1, mapping = aes(x = seq(new.price), y = rel_dep*100000), color = "blue", se = FALSE) +
labs(x = "Observations sorted by new price", y = "New price | Relative depreciation * 100'000") +
ggtitle("Comparison of relative depreciation (blue) and new prices (red)")
ggplot(data[order(data$new.price),]) +
geom_smooth(span = 0.1, mapping = aes(x = seq(new.price), y = new.price), color = "red", se = FALSE) +
ylim(0, 100000) +
xlim(0, nrow(data)) +
geom_point(mapping = aes(x = seq(new.price), y = rel_dep*100000), size = 1, alpha = 0.5, stroke = 0) +
geom_smooth(span = 0.1, mapping = aes(x = seq(new.price), y = rel_dep*100000), color = "blue", se = FALSE) +
labs(x = "Observations sorted by new price", y = "New price | Relative depreciation * 100'000") +
ggtitle("Comparison of new prices (red) and relative depreciation (blue)")
summary(rel_dep)
sd(rel_dep)
model2 <- lm(depreciation ~ power + new.price + consumption + wagon + cabriolet + diesel + hybrid + electric + manual + awd)
summary(model2)
ggplot(data, mapping = aes(depreciation, new.price)) +
geom_point() +
geom_smooth()
# new price
summary(lm(depreciation ~ new.price))
# price
summary(lm(depreciation ~ price))
ggplot(data, mapping = aes(depreciation, price)) +
geom_point() +
geom_smooth()
# diesel
table(fuel.type)
summary(lm(depreciation ~ diesel))
ggplot(data, mapping = aes(depreciation, diesel)) +
geom_point()
# wagon
table(body.type)
ggplot(data, mapping = aes(depreciation, cabriolet)) +
geom_point()
summary(lm(depreciation ~ cabriolet))
# wagon
table(body.type)
# diesel
table(fuel.type)
summary(lm(depreciation ~ electric))
ggplot(data, mapping = aes(depreciation, electric)) +
geom_point()
# drivetrain
table(awd)
# drivetrain
table(manual)
model2 <- lm(depreciation ~ power + new.price + consumption + wagon + cabriolet + diesel + hybrid + electric + manual + awd)
summary(model2)
model1 <- lm(depreciation ~ price + new.price + kilometers + vehicle.age + power + consumption + expertise + warranty + wagon + diesel + hybrid + manual + awd)
summary(model1)
# expertise
summary(lm(depreciation ~ expertise))
ggplot(data, mapping = aes(depreciation, expertise)) +
geom_point() +
geom_smooth()
ggplot(data, mapping = aes(depreciation, power)) +
geom_point() +
geom_smooth()
ggplot(data, mapping = aes(depreciation, expertise)) +
geom_point(color = expertise) +
# hybrid
table(fuel.type)
ggplot(data, mapping = aes(depreciation, expertise)) +
geom_point(mapping = aes(color = expertise)) +
# hybrid
table(fuel.type)
ggplot(data, mapping = aes(depreciation, expertise), color = expertise) +
geom_point() +
# hybrid
table(fuel.type)
rlang::last_trace()
ggplot(data, mapping = aes(depreciation, expertise, color = expertise)) +
geom_point() +
# hybrid
table(fuel.type)
ggplot(data, mapping = aes(depreciation, expertise)) +
geom_point() +
# hybrid
table(fuel.type)
ggplot(data, mapping = aes(depreciation, expertise)) +
geom_point(aes(color = expertise))
ggplot(data, mapping = aes(depreciation, expertise)) +
geom_point()
# warranty
summary(lm(depreciation ~ warranty))
ggplot(data, mapping = aes(depreciation, warranty)) +
geom_point()
# expertise
summary(lm(depreciation ~ expertise))
ggplot(data, mapping = aes(depreciation, expertise)) +
geom_point()
summary(lm(depreciation ~ price))
ggplot(data) +
geom_point(mapping = aes(depreciation, price)) +
geom_smooth(mapping = aes(depreciation, price))
ggplot(lm(depreciation ~ price), aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0, color = "red", linewidth = 1) +
geom_smooth()
ggplot(data) +
geom_point(mapping = aes(depreciation, price)) +
geom_smooth(mapping = aes(depreciation, price))
# price
summary(lm(rel_dep ~ price))
ggplot(data) +
geom_point(mapping = aes(rel_dep, price)) +
geom_smooth(mapping = aes(rel_dep, price))
# price
summary(lm(rel_dep ~ price))
ggplot(data) +
geom_point(mapping = aes(rel_dep, price)) +
geom_smooth(mapping = aes(rel_dep, price))
# vehicle age
summary(lm(depreciation ~ vehicle.age))
ggplot(data, mapping = aes(depreciation, vehicle.age)) +
geom_point() +
geom_smooth()
# new price
summary(lm(depreciation ~ new.price))
ggplot(data, mapping = aes(depreciation, new.price)) +
geom_point() +
geom_smooth()
# new price
summary(lm(rel_dep ~ new.price))
ggplot(data, mapping = aes(rel_dep, new.price)) +
geom_point() +
geom_smooth()
# price
summary(lm(rel_dep ~ price))
ggplot(data, mapping = aes(rel_dep, price)) +
geom_point() +
geom_smooth()
# vehicle age
summary(lm(rel_dep ~ vehicle.age))
ggplot(data, mapping = aes(rel_dep, vehicle.age)) +
geom_point() +
geom_smooth()
# kilometers
summary(lm(rel_dep ~ kilometers))
ggplot(data, mapping = aes(rel_dep, kilometers)) +
geom_point() +
geom_smooth()
# vehicle age
summary(lm(rel_dep ~ vehicle.age))
ggplot(data, mapping = aes(rel_dep, vehicle.age)) +
geom_point() +
geom_smooth()
# power
summary(lm(rel_dep ~ power))
ggplot(data, mapping = aes(rel_dep, power)) +
geom_point() +
geom_smooth()
# consumption
summary(lm(rel_dep ~ consumption))
ggplot(data, mapping = aes(rel_dep, consumption)) +
geom_point() +
geom_smooth()
# expertise
summary(lm(rel_dep ~ expertise))
ggplot(data, mapping = aes(rel_dep, expertise)) +
geom_point()
# warranty
summary(lm(rel_dep ~ warranty))
ggplot(data, mapping = aes(rel_dep, warranty)) +
geom_point()
summary(lm(rel_dep ~ hybrid))
ggplot(data, mapping = aes(rel_dep, hybrid)) +
geom_point()
summary(lm(rel_dep ~ diesel))
ggplot(data, mapping = aes(rel_dep, diesel)) +
geom_point()
summary(lm(rel_dep ~ wagon))
ggplot(data, mapping = aes(rel_dep, wagon)) +
geom_point()
# transmission
summary(lm(rel_dep ~ manual))
ggplot(data, mapping = aes(rel_dep, manual)) +
geom_point()
# drivetrain
summary(lm(rel_dep ~ awd))
ggplot(data, mapping = aes(rel_dep, awd)) +
geom_point()
model3 <- lm(rel_dep ~ price + new.price + kilometers + vehicle.age + power + consumption + expertise + warranty + wagon + diesel + hybrid + manual + awd) # equivalent to model1
summary(model3)
model4 <- lm(depreciation ~ power + new.price + consumption + wagon + diesel + hybrid + manual + awd) # equivalent to model2
summary(model4)
model3 <- lm(rel_dep ~ price + new.price + kilometers + vehicle.age + power + consumption + expertise + warranty + wagon + diesel + hybrid + manual + awd) # equivalent to model1
summary(model3)
ggplot(data[order(data$new.price),]) +
geom_smooth(span = 0.1, mapping = aes(x = seq(new.price), y = new.price), color = "red", se = FALSE) +
ylim(0, 100000) +
xlim(0, nrow(data)) +
geom_point(mapping = aes(x = seq(new.price), y = rel_dep*100000), size = 1, alpha = 0.5, stroke = 0) +
geom_smooth(span = 0.1, mapping = aes(x = seq(new.price), y = rel_dep*100000), color = "blue", se = FALSE) +
labs(x = "Observations sorted by new price", y = "New price | Relative depreciation * 100'000") +
ggtitle("Comparison of new prices (red) and relative depreciation (blue)")
# Prices vs depreciation
ggplot(data[order(data$price),]) +
geom_smooth(span = 0.1, mapping = aes(x = seq(price), y = price), color = "red", se = FALSE) +
ylim(0, 100000) +
xlim(0, nrow(data)) +
geom_point(mapping = aes(x = seq(price), y = rel_dep*100000), size = 1, alpha = 0.5, stroke = 0) +
geom_smooth(span = 0.1, mapping = aes(x = seq(price), y = rel_dep*100000), color = "blue", se = FALSE) +
labs(x = "Observations sorted by new price", y = "New price | Relative depreciation * 100'000") +
ggtitle("Comparison of new prices (red) and relative depreciation (blue)")
# Prices vs depreciation
ggplot(data[order(data$price),]) +
geom_smooth(span = 0.1, mapping = aes(x = seq(price), y = price), color = "red", se = FALSE) +
ylim(0, 100000) +
xlim(0, nrow(data)) +
geom_point(mapping = aes(x = seq(price), y = rel_dep*100000), size = 1, alpha = 0.5, stroke = 0) +
geom_smooth(span = 0.1, mapping = aes(x = seq(price), y = rel_dep*100000), color = "blue", se = FALSE) +
labs(x = "Observations sorted by price", y = "Price | Relative depreciation * 100'000") +
ggtitle("Comparison of prices (red) and relative depreciation (blue)")
# Depreciation
cor(price, new.price)
# We will make a correlation matrix to check which variables are correlated.
cor_matrix <- cor(select(data, c("new.price", "price", "kilometers", "vehicle.age", "power", "consumption", "expertise", "warranty", "wagon", "diesel", "hybrid", "manual", "awd"), use = complete.obs))
# We will make a correlation matrix to check which variables are correlated.
cor_matrix <- cor(select(data, c("new.price", "price", "kilometers", "vehicle.age", "power", "consumption", "expertise", "warranty", "wagon", "diesel", "hybrid", "manual", "awd"), use = "complete.obs"))
select(data, c("new.price", "price", "kilometers", "vehicle.age", "power", "consumption", "expertise", "warranty", "wagon", "diesel", "hybrid", "manual", "awd")
# We will make a correlation matrix to check which variables are correlated.
cor_matrix <- cor(select(data, c("new.price", "price", "kilometers", "vehicle.age", "power", "consumption", "expertise", "warranty", "wagon", "diesel", "hybrid", "manual", "awd")), use = "complete.obs")
cor_matrix <- cor(select(data, c("new.price", "price", "kilometers", "vehicle.age", "power", "consumption", "expertise", "warranty", "wagon", "diesel", "hybrid", "manual", "awd")), use = "complete.obs")
cor_matrix
corrplot(cor_matrix)
library(corrplot)
corrplot(cor_matrix)
cor_matrix <- cor(select(data, c("depreciation", "rel_dep", "new.price", "price", "kilometers", "vehicle.age", "power", "consumption", "expertise", "warranty", "wagon", "diesel", "hybrid", "manual", "awd")), use = "complete.obs")
cor_matrix
corrplot(cor_matrix)
# Prices vs depreciation
ggplot(data[order(data$price),]) +
geom_smooth(span = 0.1, mapping = aes(x = seq(price), y = price), color = "red", se = FALSE) +
ylim(0, 100000) +
xlim(0, nrow(data)) +
geom_point(mapping = aes(x = seq(price), y = rel_dep*100000), size = 1, alpha = 0.5, stroke = 0) +
geom_smooth(span = 0.1, mapping = aes(x = seq(price), y = rel_dep*100000), color = "blue", se = FALSE) +
labs(x = "Observations sorted by price", y = "Price | Relative depreciation * 100'000") +
ggtitle("Comparison of prices (red) and relative depreciation (blue)")
# New prices vs depreciation
ggplot(data[order(data$new.price),]) +
geom_smooth(span = 0.1, mapping = aes(x = seq(new.price), y = new.price), color = "red", se = FALSE) +
ylim(0, 100000) +
xlim(0, nrow(data)) +
geom_point(mapping = aes(x = seq(new.price), y = rel_dep*100000), size = 1, alpha = 0.5, stroke = 0) +
geom_smooth(span = 0.1, mapping = aes(x = seq(new.price), y = rel_dep*100000), color = "blue", se = FALSE) +
labs(x = "Observations sorted by new price", y = "New price | Relative depreciation * 100'000") +
ggtitle("Comparison of new prices (red) and relative depreciation (blue)")
corrplot(cor_matrix)
# new price
summary(lm(rel_dep ~ new.price))
ggplot(data, mapping = aes(rel_dep, new.price)) +
geom_point() +
geom_smooth()
model3 <- lm(rel_dep ~ price + new.price + kilometers + vehicle.age + power + consumption + expertise + warranty + wagon + diesel + hybrid + manual + awd) # equivalent to model1
summary(model3)
summary(model4)
corrplot(cor_matrix)
# Relative depreciation is clearly negatively correlated with price, but surprisingly is uncorrelated with new price.
# Obviously relative depreciation is strongly dependent on vehicle.age and kilometers, since these are the main factors that determine a vehicle's depreciation.
summary(lm(rel_dep ~ vehicle.age + kilometers))
cor_matrix
# 78% of rel_dep's variance can be explained by just vehicle.age and kilometers (adjusted R squared).
# Let's investigate if any immovable factors have a significant effect on relative depreciation.
order(cor_matrix[2,])
# 78% of rel_dep's variance can be explained by just vehicle.age and kilometers (adjusted R squared).
# Let's investigate if any immovable factors have a significant effect on relative depreciation.
order(cor_matrix)
# 78% of rel_dep's variance can be explained by just vehicle.age and kilometers (adjusted R squared).
# Let's investigate if any immovable factors have a significant effect on relative depreciation.
order(cor_matrix[2,])
# 78% of rel_dep's variance can be explained by just vehicle.age and kilometers (adjusted R squared).
# Let's investigate if any immovable factors have a significant effect on relative depreciation.
order(cor_matrix[2,])
# 78% of rel_dep's variance can be explained by just vehicle.age and kilometers (adjusted R squared).
# Let's investigate if any immovable factors have a significant effect on relative depreciation.
order(-cor_matrix[2,])
cor_matrix[2, order(-cor_matrix[2,])]
cor_matrix[2, order(-abs(cor_matrix[2,]))]
t.test(vehicle.age, vehicle.age[hybrid == TRUE])
summary(vehicle.age)
summary(vehicle.age[hybrid == TRUE])
t.test(vehicle.age, vehicle.age[hybrid == TRUE])
t.test(kilometers, kilometers[hybrid == TRUE])
setwd("~/GitHub/Data_science/cleaned-data")
# VOLVO: Vehicle age vs Price
graph5 <- ggplot(volvo, aes(x = vehicle.age/365, y = price)) +
geom_point(color = "#000080", size = 1, alpha = 0.6) +
labs(title = "Volvo: Vehicle age vs Price", x = "Vehicle age", y = "Price") +
theme_classic()
# Chargement des bibliothèques nécessaires
library(ggplot2)
library(dplyr)
library(plotly)
library(htmltools)
library(formattable)
library(gridExtra)
library(htmltools)
library(shiny)
library(tidyverse)
library(patchwork)
#| warning: false
setwd("~/GitHub/Data_science/cleaned-data")
golf <- read.csv("golf2_cleaned.csv")
skoda <- read.csv("skoda2_cleaned.csv")
audi <- read.csv("audi2_cleaned.csv")
toyota <- read.csv("toyota_cleaned.csv")
volvo <- read.csv("volvo2_cleaned.csv")
# Combine all datasets into a single dataframe
data <- rbind(golf, skoda, audi, toyota, volvo)
# Creating a function to plot a price distribution histogram
plot_price_distribution <- function(data, title) {
p <- ggplot(data, aes(x = price))  +
geom_histogram(aes(y = ..density..), bins = 30, fill = "#8B94F6", color = "darkblue") +
geom_density(color = "darkblue", size = 1) +
theme_minimal() +
labs(title = paste("Price distribution for", title), x = "Price", y = "Density")
ggplotly(p)
}
volvo_plot <- plot_price_distribution(volvo, "Volvo XC60")
volvo_plot
# Enhancing the scatter plots
# AUDI: Vehicle age vs Price
graph1 <- ggplot(audi, aes(x = vehicle.age/365, y = price)) +
geom_point(color = "#000080", size = 1, alpha = 0.6) +
labs(title = "Audi: Vehicle age vs Price", x = "Vehicle age", y = "Price") +
theme_classic()
p1 <- ggplotly(graph1)
p1
# Assuming you've loaded your datasets into dataframes named volvo_data, toyota_data, skoda_data, golf_data, audi_data
# Combine all dataframes into one
all_cars <- bind_rows(
mutate(volvo, brand = "Volvo"),
mutate(toyota, brand = "Toyota"),
mutate(skoda, brand = "Skoda"),
mutate(golf, brand = "Golf"),
mutate(audi, brand = "Audi")
)
# Convert body type to a factor for better plotting
all_cars$body.type <- as.factor(all_cars$body.type)
# Create the scatter plot
graph0 <- ggplot(all_cars, aes(x = body.type, y = price, fill = brand)) +
geom_boxplot() +
labs(title = "Price distribution by body type and brand",
x = "body type", y = "Price") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Rotation des étiquettes de l'axe X pour une meilleure lisibilité
p1 <- ggplotly(graph0)
p1
# Assuming you've loaded your datasets into dataframes named volvo_data, toyota_data, skoda_data, golf_data, audi_data
# Combine all dataframes into one
all_cars <- bind_rows(
mutate(volvo, brand = "Volvo"),
mutate(toyota, brand = "Toyota"),
mutate(skoda, brand = "Skoda"),
mutate(golf, brand = "Golf"),
mutate(audi, brand = "Audi")
)
# Convert body type to a factor for better plotting
all_cars$body.type <- as.factor(all_cars$body.type)
# Create the scatter plot
graph0 <- ggplot(all_cars, aes(x = body.type, y = price)) +
geom_boxplot() +
labs(title = "Price distribution by body type and brand",
x = "body type", y = "Price") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Rotation des étiquettes de l'axe X pour une meilleure lisibilité
p1 <- ggplotly(graph0)
p1
View(all_cars)
table(all_cars$body.type)
# Combine all dataframes into one
all_cars <- bind_rows(
mutate(volvo, brand = "Volvo"),
mutate(toyota, brand = "Toyota"),
mutate(skoda, brand = "Skoda"),
mutate(golf, brand = "Golf"),
mutate(audi, brand = "Audi")
)
# Convert body type to a factor for better plotting
all_cars$body.type <- as.factor(all_cars$body.type)
# We filter cars for body types where there is sufficient data
filtered_cars <- subset(all_cars, body.type %in% c("Break", "Cabriolet", "Limousine", "Petite Voiture", "SUV / Tout-terrain"))
# Create the scatter plot
graph0 <- ggplot(filtered_cars, aes(x = body.type, y = price)) +
geom_boxplot() +
labs(title = "Price distribution by body type and brand",
x = "body type", y = "Price") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Rotation des étiquettes de l'axe X pour une meilleure lisibilité
p1 <- ggplotly(graph0)
p1
# Combine all dataframes into one
all_cars <- bind_rows(
mutate(volvo, brand = "Volvo"),
mutate(toyota, brand = "Toyota"),
mutate(skoda, brand = "Skoda"),
mutate(golf, brand = "Golf"),
mutate(audi, brand = "Audi")
)
# Convert body type to a factor for better plotting
all_cars$body.type <- as.factor(all_cars$body.type)
# We filter cars for body types where there is sufficient data
filtered_cars <- subset(all_cars, body.type %in% c("Break", "Cabriolet", "Limousine", "Petite voiture", "SUV / Tout-terrain"))
# Create the scatter plot
graph0 <- ggplot(filtered_cars, aes(x = body.type, y = price)) +
geom_boxplot() +
labs(title = "Price distribution by body type and brand",
x = "body type", y = "Price") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Rotation des étiquettes de l'axe X pour une meilleure lisibilité
p1 <- ggplotly(graph0)
p1
# Fonction pour calculer les statistiques de base
calculate_stats <- function(df) {
df %>%
summarise(
Mean = mean(price, na.rm = TRUE),
Median = median(price, na.rm = TRUE),
SD = sd(price, na.rm = TRUE)
)
}
# Calcul des statistiques pour chaque marque
stats_volvo <- calculate_stats(volvo)
stats_toyota <- calculate_stats(toyota)
stats_skoda <- calculate_stats(skoda)
stats_golf <- calculate_stats(golf)
stats_audi <- calculate_stats(audi)
# Création d'un tableau récapitulatif
summary_table <- rbind(
Volvo = stats_volvo,
Toyota = stats_toyota,
Skoda = stats_skoda,
Golf = stats_golf,
Audi = stats_audi
)
# Mise en forme du tableau avec formattable
color_formatter <- color_tile("white", "lightblue")
formattable(summary_table, list(
Mean = color_formatter,
Median = color_formatter,
SD = color_formatter
))
# Enhancing the scatter plots
# AUDI: Mileage vs Price
graph1 <- ggplot(audi, aes(x = kilometers, y = price)) +
geom_point(color = "#1E90FF", size = 1, alpha = 0.3) +
labs(title = "Audi: Mileage vs Price", x = "Mileage", y = "Price") +
theme_classic()
p1 <- ggplotly(graph1)
p1
# Enhancing the scatter plots
# AUDI: Mileage vs Price
graph1 <- ggplot(audi, aes(x = kilometers, y = price)) +
geom_point(color = "#1E90FF", size = 1, alpha = 0.5) +
labs(title = "Audi: Mileage vs Price", x = "Mileage", y = "Price") +
theme_classic()
p1 <- ggplotly(graph1)
p1
# Enhancing the scatter plots
# AUDI: Mileage vs Price
graph1 <- ggplot(audi, aes(x = kilometers, y = price)) +
geom_point(color = "#1E90FF", size = 1, alpha = 0.6) +
labs(title = "Audi: Mileage vs Price", x = "Mileage", y = "Price") +
theme_classic()
p1 <- ggplotly(graph1)
p1
