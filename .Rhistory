rm(test)
test <- na_if(consumption, "-")
test
parse_number(test)
test <- parse_number(test)
typeof(test)
test[order(test),]
order(test)
test
str_sort(test)
test[order(test)]
test[order(test, decreasing = TRUE)]
consumption |>
na_if(consumption, "-")
consumption |>
na_if(y = "-")
parse_number()
parse_number(x)
parse_number(x = consumption)
test <- na_if(consumption, "-")
test <- parse_number(test)
rm(test)
test <- na_if(consumption, "-")
test <- parse_number(test)
test
test[order(test, decreasing = TRUE)]
data$consumption <- na_if(consumption, "-")
data$consumption <- parse_number(consumption)
test[order(test, decreasing = TRUE)]
test <- filter(>12)
test
test <- na_if(test, >12)
test <- na_if(test, 12:300)
length(test[x > 12])
length(test[test > 12])
length(test)
rm(test)
test <- na_if(consumption, "-")
length(test)
test <- consumption
length(test)
length(test[test > 12])
test
test <- parse_number(test)
rm(test)
test <- na_if(consumption, "-")
test <- parse_number(test)
test
length(test[test > 12])
test[order(test, decreasing = TRUE)]
test[test > 12]
test <- na_if(consumption, test[test > 12])
test[test > 12]
test > 12
test[test > 12]
test[test > 12] <- NA
test[test > 12]
test
test[order(test, decreasing = TRUE)]
test[order(test, decreasing = F)]
test[order(test, decreasing = TRUE)]
consumption[order(consumption = TRUE)]
consumption
data$consumption <- na_if(consumption, "-")
consumption
data$consumption
consumption
consumption <- na_if(consumption, "-")
consumption
consumption <- parse_number(consumption)
consumption
data$consumption[order(data$consumption = TRUE)]
data$consumption[order(data$consumption, descending = TRUE)]
data$consumption[order(data$consumption, decreasing = TRUE)]
data$consumption <- parse_number(data$consumption)
data$consumption[order(data$consumption, decreasing = TRUE)]
data$consumption
data$consumption[order(data$consumption, decreasing = TRUE)]
rm(consumption)
data$consumption[order(data$consumption, decreasing = TRUE)]
data$consumption[data$consumption > 12] <- NA
data$consumption[order(data$consumption, decreasing = TRUE)]
data$consumption[order(data$consumption, decreasing = F)]
unique(consumption)
unique(data$consumption)
order(unique(data$consumption))
data$consumption(order(unique(data$consumption)))
data$consumption[order(unique(data$consumption))]
data$consumption[order(data$consumption, decreasing = TRUE)]
unique(data$consumption[order(data$consumption, decreasing = TRUE)])
golf2 <- read.csv("golf2.csv")
data$consumption <- golf2$consumption
data$consumption
library(tidyverse)
library(lubridate)
setwd("~/GitHub/Data_science/data")
data <- read.csv("golf2.csv")
golf2 <- read.csv("golf2.csv")
data$price <- parse_number(price)
rm(data)
rm(test)
rm(golf2)
library(tidyverse)
library(lubridate)
setwd("~/GitHub/Data_science/data")
data <- read.csv("golf2.csv")
golf2 <- read.csv("golf2.csv")
data$price <- parse_number(price)
data$price <- parse_number(data$price)
data$kilometers <- parse_number(data$kilometers, locale = locale(grouping_mark = "'"))
data$listing.id <- parse_number(data$listing.id)
View(data)
data$consumption <- na_if(data$consumption, "-")
data$consumption <- parse_number(data$consumption)
unique(data$consumption[order(data$consumption)])
data$consumption[data$consumption > 12] <- NA
unique(data$consumption[order(data$consumption)])
data |>
group_by_all |>
count()
data |>
group_by_all() |>
count()
data$consumption |>
group_by_all() |>
count()
data$body.type |>
group_by_all() |>
count()
data$body.type |>
group_by_all() |>
data$consumption |>
group_by_all() |>
data$consumption |>
group_by_all() |>
count()
data$consumption |>
group_by_all() |>
count()
as.tibble(data$consumption)
as.tibble(data$consumption) |>
group_by_all() |>
count()
data$consumption |>
group_by_all() |>
count()
as.tibble(data$consumption) |>
group_by_all() |>
count() |>
print(n = 77)
as.tibble(data$body.type) |>
group_by_all() |>
count() |>
as.tibble(data$body.type) |>
group_by_all() |>
count() |>
as.tibble(data$body.type) |>
group_by_all() |>
count() |>
print(n = 10)
unique(data$power)
data$power <- na_if(data$power, "-")
test <- parse_number(data$power)
unique(test[order(data$power)])
typeof(test)
data$power <- parse_number(data$power)
unique(data$expertise[order(data$expertise)])
data$expertise
data$expertise["Non"]
data$expertise[data$expertise == "Non"]
data$expertise[data$expertise == "Non"] <- FALSE
data$expertise
data$expertise[data$expertise == "Oui"] <- TRUE
data$expertise
typeof(data$expertise)
as.logical(data$expertise)
data$expertise <- as.logical(data$expertise)
unique(data$accident[order(data$accident)])
unique(data$warranty[order(data$warranty)])
data$accident[data$accident == "Non"] <- FALSE
data$accident[data$accident == "Oui"] <- TRUE
data$accident <- as.logical(data$accident)
data$warranty[data$warranty == "Non"] <- FALSE
data$warranty[data$warranty == "Oui"] <- TRUE
data$warranty <- as.logical(data$warranty)
unique(data$new.price[order(data$new.price)])
data$new.price <- na_if(data$new.price, "Oui")
data$new.price <- na_if(data$new.price, "Non")
data$new.price <- parse_number(data$new.price)
data$price <- golf2$price
data$price <- parse_number(data$price, locale = locale(grouping_mark = "'"))
data$new.price <- golf2$new.price
data$new.price <- na_if(data$new.price, "Oui")
data$new.price <- na_if(data$new.price, "Non")
data$new.price <- parse_number(data$new.price, locale = locale(grouping_mark = "'"))
unique(data$new.price[order(data$new.price)])
data$new.price[data$new.price < 5000] <- NA
unique(data$new.price[order(data$new.price)])
test <- data[-c(1:4)]
View(test)
data <- data[-c(1:4)]
rm(test)
test <- as.Date(data$date)
test
unique(data$date[order(data$date)])
#We first remove one outlier (error)
data$date <- na_if(data$date, "2021.0000")
#We first remove one outlier (error)
data$date[data$date == "2021.0000"] <- NA
count(data$data == "2021.0000")
count(data$date == "2021.0000")
test <- data$date[-(2802)]
test
unique(test[order(test)])
data$date[2802]
data$date[2802] <- NA
#
rm(test)
test <- "2.1999"
as.Date(test)
test <- "02.1999"
as.Date(test)
test <- "01.02.1999"
as.Date(test)
test <- "01-02-1999"
as.Date(test)
test <- c("2.1999", "1.2004", "6.2019")
as.Date(test)
as.Date(test)
test <- c("02.1999", "01.2004", "06.2019")
as.Date(test)
test <- c("01-02.1999", "01-01.2004", "01-06.2019")
as.Date(test)
test <- c("01.02.1999", "01.01.2004", "01.06.2019")
as.Date(test)
test <- c("01-02-1999", "01-01-2004", "01-06-2019")
as.Date(test)
install.packages(parsedate)
install.packages(parsedate)
install.packages("parsedate")
library(parsedate)
parse_date(test)
as.Date(parse_date(test))
as.Date(parse_date(test)) |>
format((test), "%y-%d-%m")
test <- c("01.2.1999", "01.1.2004", "01.11.2019")
parse_date(test)
as.Date(parse_date(test)) |>
format((test), "%y-%d-%m")
as.Date(parse_date(test))
test <- c("01.2.1999", "01.7.2004", "01.11.2019")
parse_date(test)
as.Date(parse_date(test))
test <- paste("01.", data$date, sep = "")
test
class(data$date)
rm(test)
test <- as.character(data$date)
test
test <- paste("01.", test, sep = "")
test
rm(test)
test <- paste0("01.", data$date)
test
rm(test)
test <- dmy(paste0("01.", data$date))
test
rm(test)
test <- data$date
test
test <- data$date
test
parse_date(test)
library(tidyverse)
library(lubridate)
setwd("~/GitHub/Data_science/data")
data <- read.csv("golf2.csv")
golf2 <- read.csv("golf2.csv")
data$price <- parse_number(data$price, locale = locale(grouping_mark = "'"))
data$kilometers <- parse_number(data$kilometers, locale = locale(grouping_mark = "'"))
data$listing.id <- parse_number(data$listing.id)
data$consumption <- na_if(data$consumption, "-")
data$consumption <- parse_number(data$consumption)
unique(data$consumption[order(data$consumption)])
data$consumption[data$consumption > 12] <- NA
data$power <- na_if(data$power, "-")
data$power <- parse_number(data$power)
data$expertise[data$expertise == "Non"] <- FALSE
data$expertise[data$expertise == "Oui"] <- TRUE
data$expertise <- as.logical(data$expertise)
data$accident[data$accident == "Non"] <- FALSE
data$accident[data$accident == "Oui"] <- TRUE
data$accident <- as.logical(data$accident)
data$warranty[data$warranty == "Non"] <- FALSE
data$warranty[data$warranty == "Oui"] <- TRUE
data$warranty <- as.logical(data$warranty)
data$new.price <- na_if(data$new.price, "Oui")
data$new.price <- na_if(data$new.price, "Non")
data$new.price <- parse_number(data$new.price, locale = locale(grouping_mark = "'"))
unique(data$new.price[order(data$new.price)])
data$new.price[data$new.price < 5000] <- NA
data <- data[-c(1:4)]
unique(data$date[order(data$date)])
data$date[2802] <- NA
###assistant
test <- format(data$date, format = "%m.%Y")
test
as.Date(test)
test <- paste0("01.", test)
test
###assistant
test <- format(data$date, format = "%m.%Y")
test
test2 <- data$date
test2
test2 <- paste0("01.", test2)
test2
test2 <- data$date
test2
as.character(test2)
###assistant
test <- format(data$date, format = "%m.%Y")
test
str_trim(test)
as.Date(test)
parse_date(test)
parse_date(str_trim(test))
as.Date(str_trim(test))
str_trim(test)
parse_date(str_trim(test))
as.Date(str_trim(test))
test <- str_trim(test)
test <- paste0("01.", test)
test
parse_date(test)
as.Date(test)
###assistant
test <- format(data$date, format = "%mm.%YYYY")
test
as.Date(test)
parse_date(test)
###assistant
test <- format(data$date, format = "%m.%Y")
test
parse_date(test, format = "%m.%Y")
test2 <- data$date
parse_date(test2, format = "%m.%Y")
as.Date(test)
typeof(test)
class(test)
as.Date(test, "%Y-%m-%d")
test <- data$date
test
###assistant
test <- format(data$date, format = "%m.%Y")
as.Date(test, format = "%m.%Y")
test
parse_date(test2, format = "%m.%Y")
###assistant
test <- format(data$date, format = "%m.%Y")
parse_date(test2, format = "%m.%Y")
test
parse_date(test, format = "%m.%Y")
as.Date(test, format = "%Y-%m-%d")
###assistant
lct
#######try to solve all NA
spiderman <- "2020-10-01"
as.Date(spiderman)
test
as.Date(test, format = "%m.%Y")
#######try to solve all NA
spiderman <- "6.2003"
as.Date(spiderman)
as.Date(spiderman, format = "%m.%Y")
#######try to solve all NA
spiderman <- "06.2003"
as.Date(spiderman, format = "%m.%Y")
#######try to solve all NA
spiderman <- "01.06.2003"
as.Date(spiderman, format = "%d.%m.%Y")
spiderman <- as.Date(spiderman, format = "%d.%m.%Y")
typeof(spiderman)
class(spiderman)
#######try to solve all NA
spiderman <- "2019-02-01"
spiderman <- as.Date(spiderman, format = "%Y-%m-%d")
typeof(spiderman)
class(spiderman)
spiderman
test
###assistant
test <- format(data$date, format = "%m.%Y")
test
parse_date(test, format = "%m.%Y")
as.Date(test, format = "%Y-%m-%d")
test
test <- parse_date(test, format = "%m.%Y")
test
class(test)
test <- format(test, format = "%m.%Y")
test
class(test)
typeof(test)
data$date <- format(data$date, format = "%m.%Y")
plot(data$date, data$price)
test
plot(test, data$price)
test <- parse_date(test, format = "%m.%Y")
test
class(test)
typeof(test)
plot(test, data$price)
data$date <- golf2$date
data$date
data$date
data$date |>
format("%m.%Y")
data$date |>
format(format = "%m.%Y")
data$date
data$date |>
format(format = "%m.%Y")
data$date <- format(data$date, format = "%m.%Y")
data$date
data$date <- golf2$date
data$date <- format(data$date, format = "%m.%Y")
data$date
data$date <- golf2$date
data$date
data$date <- format(data$date, format = "%m.%Y")
data$date
data$date <- parse_date(data$date, format = "%m.%Y" )
data$date
plot(data$date, data$price)
data$date <- golf2$date
data$date <- data$date |>
format(format = "%m.%Y") |>
parse_date(format = "%m.%Y")
data$date
data$date[2802]
library(tidyverse)
library(lubridate)
setwd("~/GitHub/Data_science/data")
data <- read.csv("golf2.csv")
golf2 <- read.csv("golf2.csv")
data$price <- parse_number(data$price, locale = locale(grouping_mark = "'"))
data$kilometers <- parse_number(data$kilometers, locale = locale(grouping_mark = "'"))
data$listing.id <- parse_number(data$listing.id)
data$consumption <- na_if(data$consumption, "-")
data$consumption <- parse_number(data$consumption)
unique(data$consumption[order(data$consumption)])
data$consumption[data$consumption > 12] <- NA
data$power <- na_if(data$power, "-")
data$power <- parse_number(data$power)
data$expertise[data$expertise == "Non"] <- FALSE
data$expertise[data$expertise == "Oui"] <- TRUE
data$expertise <- as.logical(data$expertise)
data$accident[data$accident == "Non"] <- FALSE
data$accident[data$accident == "Oui"] <- TRUE
data$accident <- as.logical(data$accident)
data$warranty[data$warranty == "Non"] <- FALSE
data$warranty[data$warranty == "Oui"] <- TRUE
data$warranty <- as.logical(data$warranty)
data$new.price <- na_if(data$new.price, "Oui")
data$new.price <- na_if(data$new.price, "Non")
data$new.price <- parse_number(data$new.price, locale = locale(grouping_mark = "'"))
unique(data$new.price[order(data$new.price)])
data$new.price[data$new.price < 5000] <- NA
data <- data[-c(1:4)]
unique(data$date[order(data$date)])
data$date[2802] <- NA
data$date <- data$date |>
format(format = "%m.%Y") |>
parse_date(format = "%m.%Y")
data$date
class(data$created.date)
data$created.date <- parse_date(data$created.date)
data$created.date
class(data$created.date)
data$expertise.date <- parse_date(data$expertise.date)
data$expertise.date <- parse_date(data$expertise.date)
data$expertise.date <- golf2$expertise.date
data$expertise.date <- data$expertise.date |>
format(format = "%d.%m.%Y") |>
parse_date(format = "%d.%m.%Y")
install.packages("tm")
library(tm)
comments <- data$description.text
comments_corpus <- Corpus(VectorSource(comments$comment_text))
comments_corpus <- Corpus(VectorSource(comments))
comments_corpus
comments_corpus <- tm_map(comments_corpus, content_transformer(tolower))
comments_corpus
comments_corpus <- tm_map(comments_corpus, removePunctuation)
comments_corpus <- tm_map(comments_corpus, removeWords, stopwords("german"))
comments_corpus <- tm_map(comments_corpus, removeWords, stopwords("french"))
comments_corpus <- tm_map(comments_corpus, removeWords, stopwords("italian"))
comments_corpus <- tm_map(comments_corpus, removeWords, stopwords("english"))
dtm <- DocumentTermMatrix(comments_corpus)
term_frequency <- rowSums(as.matrix(dtm))
View(dtm)
most_common_terms <- head(sort(term_frequency, decreasing = TRUE), 10)  # Adjust '10' to get a different number of top terms
print(most_common_terms)
term_frequencies <- c(3290, 3019, 698, 1736, 1861, 1855, 2987, 2163, 2097, 3097, 621, 511, 454, 330, 329, 319, 306, 303, 282, 281)
most_common_terms <- data.frame(
Term = names(term_frequencies),
Frequency = term_frequencies
)
print(most_common_terms)
dtm$Terms
dtm$dimnames$Terms
