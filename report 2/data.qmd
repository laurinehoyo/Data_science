---
code-fold: true
---

# Data

## Data source

### Source
<p align="justify">
We obtained the five datasets corresponding to distinct car models from various brands and groups by extracting data from the Swiss used car market website Autoscout24.ch. The data extraction was carried out using the Chrome extension webscraper.io. Each table represents the total listings of used cars for a particular make and model at one given point in time. The data for the different tables were scraped between 07.10.2023 and 31.10.2023.
<p>
### Description
<p align="justify">
The datasets comprise five distinct car models originating from various brands. The models are the following : Audi A3, Skoda Octavia, Toyota Yaris, Volkswagen Golf, and Volvo XC60. While each table shares identical variables, the number of observations varies. Each observation represents a listing for sale on the website Autoscout24.ch.
<p>
Below are the variables that we kept :

```{r, message=FALSE, warning=FALSE, results='hide'}
library("tibble")
library("kableExtra")
library("dplyr")
```


```{r, message=FALSE, warning=FALSE}
# Creation of the tibble
car_data <- tibble(
  Variables = c("title", "subtitle", "price", "date", "body.type", "kilometers",
                "fuel.type", "transmission", "power", "drivetrain", "consumption",
                "expertise", "expertise.date", "accident", "warranty", "warranty.details",
                "location", "listing.id", "created.date", "new.price", "description.text",
                "defective", "vehicle.age", "listing.age"),
  Meaning = c("title of the listing", "subtitle of the listing", "price of the car in CHF",
              "date of the car", "body type of the car (e.g. wagon)", "kilometers traveled",
              "type of fuel used by the car (e.g. diesel)", "transmission of the car (automatic or manual)", "power of the car, in horsepower",
              "drivetrain of the car (FWD, RWD or AWD)", "consumption of the car in L/100 km", "whether the car has been expertised or not",
              "date of expertise if the car has been expertised", "whether the car had an accident or not",
              "whether the car has a warranty or not", "details of the warranty, if there is one",
              "location of the car", "listing ID", "publication date of the listing", "new price of the car in CHF",
              "description of the car", "whether the car is defective or not", "age of the car, in days",
              "age of the listing, in days")
)

# Using kable and kableExtra to format the table
kable_styling <- car_data %>%
  kable("html", align = 'l') %>%
  kable_styling(bootstrap_options = c("striped", "hover"), full_width = F) %>%
  column_spec(1, bold = T, color = "steelblue") %>%
  column_spec(2, italic = T)

kable_styling

```

```{r, message=FALSE, warning=FALSE, results='hide'}

```

### Data cleaning
<p align="justify">
The cleaning process of our data was quite tedious. We used the same process for each of the five datasets, as they come from the same website and contain the same variables. The necessary libraries to clean our data were the packages "tidyverse", and "lubridate", which helped us format our dates.
<p>
```{r, message=FALSE, warning=FALSE, results='hide'}
### We load the necessary libraries to clean our data

library(tidyverse)
library(lubridate)

### We set our working directory to the data folder and load our dataset golf2

setwd("./data")
data <- read.csv("golf2.csv")
golf2 <- read.csv("golf2.csv")
```
<p align="justify">
We started by only keeping the numbers in the columns price, kilometers, and listing.id by using the parse_number function. We do this because some observations may include characters such as "CHF", "km/h", and so on.
<p>
```{r, message=FALSE, warning=FALSE, results='hide'}
### We will start by keeping only the numbers in the columns "price", "kilometers" and "listing.id"

data$price <- parse_number(data$price, locale = locale(grouping_mark = "'"))
data$kilometers <- parse_number(data$kilometers, locale = locale(grouping_mark = "'"))
data$listing.id <- parse_number(data$listing.id)
```
<p align="justify">
We then took care of the column consumption and got rid of "l/100km" so as to only keep the number, and we set every "-" to "NA". When doing this, we saw that there were some outliers that should not have been in our dataset. Indeed, values jumped from 11.6 l/100km to 160 l/100km. This probably occurred when we scraped the data, there were probably some errors. Maybe the scraping software took another field's value when the consumption field was blank. We then did the same process for the column power. We kept the unit of measurement horsepower instead of kW.
<p>
```{r, message=FALSE, warning=FALSE, results='hide'}
### We keep only the first number in "consumption" and get rid of "l/100km" and set "-" to "NA"

data$consumption <- na_if(data$consumption, "-")
data$consumption <- parse_number(data$consumption)

### We see that there are some outliers that shouldn't be here. The values jump from 11.6 l/100km to 160 l/100km. These are probably errors when scraping the data, the scraping software has maybe taken another field's value when the consumption field was blank.

unique(data$consumption[order(data$consumption)])
data$consumption[data$consumption > 12] <- NA

# We can easily see all the unique values and the duplicate count with this code:

#as.tibble(data$consumption) |>
#  group_by_all() |>
#  count() |>
#  print(n = 77)

### Now let's do the same for column "power". We will keep the unit of measurement horsepower instead of kW.

data$power <- na_if(data$power, "-")
data$power <- parse_number(data$power)
```
<p align="justify">
Now taking care of the column expertise, we changed the "oui/non" values to logical values TRUE/FALSE. We did the same for the accident and warranty columns.
<p>
```{r, message=FALSE, warning=FALSE, results='hide'}
data$expertise[data$expertise == "Non"] <- FALSE
data$expertise[data$expertise == "Oui"] <- TRUE
data$expertise <- as.logical(data$expertise)

### Let's do the same for columns "accident" and "warranty".

data$accident[data$accident == "Non"] <- FALSE
data$accident[data$accident == "Oui"] <- TRUE
data$accident <- as.logical(data$accident)

data$warranty[data$warranty == "Non"] <- FALSE
data$warranty[data$warranty == "Oui"] <- TRUE
data$warranty <- as.logical(data$warranty)
```
<p align="justify">
We then fixed the column new.price by setting values "Oui/Non" to "NA", because it was probably an error while scraping the data. We then parsed numbers from the remaining rows. While doing this, we saw in unique values some unrealistic new car prices, notably 1, 54, and 4309. We assumed these were errors and removed them.
<p>
```{r, message=FALSE, warning=FALSE, results='hide'}
### We will now fix the column "new.price" by setting values "Oui"/"Non" (Errors when scraping) to NA, then we will parse numbers from the remaining columns.

data$new.price <- na_if(data$new.price, "Oui")
data$new.price <- na_if(data$new.price, "Non")
data$new.price <- parse_number(data$new.price, locale = locale(grouping_mark = "'"))

### If we look at the unique values we can see some unrealistic new car prices, notably 1, 54 and 4309. We will assume these are errors and remove them.

unique(data$new.price[order(data$new.price)])
data$new.price[data$new.price < 5000] <- NA


```
<p align="justify">
Afterwards, we dropped columns that contained meaningless information, and that are a result of scraping the data, such as webscraper.order, web.scraper.start.url, page and annonce.link.
<p>
```{r, message=FALSE, warning=FALSE, results='hide'}
### Let's drop some columns that have meaningless information, and that are a result of scraping the data. We will drop columns "web.scraper.order", "web.scraper.start.url", "page" and "annonce.link".

data <- data[-c(1:4)]
```
<p align="justify">
After this, we proceeded to use the package lubridate. We wanted to set the date column to class "Date" to simplify plotting. To do this we needed to format the values as YYYY.MM.DD, as they were originally at MM.YYYY. We looked at the data first and we removed the visible errors. We set the format to MM.YYYY, as the vector needs to be a character vector for the parse_date function to work, and we then parsed date. The final format is YYYY-MM-DD. We did the same for the expertise.date and created.date columns.
<p>
```{r, message=FALSE, warning=FALSE, results='hide'}
### Now we want to set the "date" column to class "Date" to simplify plotting. To do this we need to format the values as yyyy.mm.dd, they are currently at mm.yyyy.

# Let's look at the data first

unique(data$date[order(data$date)])

# We remove one visible error

data$date[2802] <- NA

# Now we set the format to mm.yyyy (the vector needs to be a character vector for the parse_date function to work) then parse date. The final format is yyyy-mm-dd.

data$date <- data$date |>
  format(format = "%m.%Y") |>
  parse_date(format = "%m.%Y")

### We set expertise.date and created.date to date classes as well

data$created.date <- parse_date(data$created.date)

data$expertise.date <- data$expertise.date |>
  format(format = "%d.%m.%Y") |>
  parse_date(format = "%d.%m.%Y")
```
<p align="justify">
We added a column to the datasets where values will be TRUE if the vehicle is potentially defective or in need of repairs, and FALSE if not. We removed these defective vehicles when creating our model because they could bias it, making it underestimate prices for functioning vehicles. We identified defective vehicles in two ways. The first way was using the accident column, which is TRUE if the seller has flagged the vehicle as having been in an accident in the past, and FALSE if not. The second way was to look for keywords in columns title, subtitle, and description.text which are common in listings with defective vehicles. We created a column where values are TRUE if one of the defective phrases is detected, and FALSE if not. If either of these two identifiers were TRUE, the vehicle would be deemed defective and not eligible to serve as data for creating our model.
<p>

<p align="justify">
We first created a vector of characters which are the defective keywords. We then created a second list where the keywords were likely to have negation before them, so as to not falsely flag vehicles as defective. We then created an "ok" keywords vector that overpowered the second defective keywords vector. We did the same for other languages that listings could be in, such as French, Italian, or English. We then created vectors for the keywords and added the column defective. We set to TRUE if any keyword from the vector is in the subtitle or description.text column, using the "for" function. We set to FALSE all the TRUE values that contain a keyword in the vector ok_keywords. We set to defective to TRUE where the column accident is TRUE.
<p>
```{r, message=FALSE, warning=FALSE, results='hide'}
### We will now add a column to the data where values will be TRUE where the vehicle is potentially defective or in need of repairs, and FALSE if not. 
### We will need to remove these defective vehicles when creating our model because they could bias it, making it underestimate prices for functioning vehicles.
### We plan to identify defective vehicles in two ways. The first way being the "accident" column, which is TRUE if the seller has flagged the vehicle as having been in an accident in the past, and FALSE if not.
### The second way will be to look for keywords in columns "title", "subtitle" and "description.text" which are common in listings with defective vehicles, such as "defekt", "motor startet nicht" etc.
### We will create a column where values will be TRUE if one of these keywords or key phrases is detected, and FALSE if not.
### If either of these two identifiers are TRUE, the vehicle will be deemed defective and not eligible to serve as data for creating our model.

# First we create a vector of characters which are the defective keywords.

defective_keywords_de <- c("defekt", "defect", "defeckt", "startet nicht", "starttet nicht", "gebrochen", "lampe leuchtet", "für export", "fur export", "gerausche", "geräusche", "gerräusche", "angebrochen", "angeschlagen", "beschädigt", "fehlerhaft", "lädiert", "nicht in Ordnung", "nicht mehr funktionierend", "nicht mehr gut", "schadhaft", "zerbrochen", "zerrissen", "kaputt" )

# We create a second list where the keywords are likely to have negation before them, so as to not falsely flag vehicles as defective. 
# We will then create an "ok" keywords vector that overpower the second defective keywords vector.

defective_keywords_2_de <- c("schäden", "problem", "schade", "probleme", "schaden")
ok_keywords_de <- c(paste("ohne", defective_keywords_2_de, sep = " "), paste("kein", defective_keywords_2_de, sep = " "), paste("keine", defective_keywords_2_de, sep = " "))

#We repeat these steps for other languages that listings could be in (French, Italian and English).

defective_keywords_fr <- c("témoin", "bruit", "défaut", "ne démarre pas", "cassé", "pour export", "pour l'export", "endommagé", "endommager", "endommage", "défectueux", "defectueux", "pas en bon état", "ne fonctionne plus", "cassé")
defective_keywords_2_fr <- c("dégâts", "dégats", "degâts", "degats", "problème", "probleme", "dommages")
ok_keywords_fr <- c(paste("sans", defective_keywords_2_fr, sep = " "), paste("pas de", defective_keywords_2_fr, sep = " "), paste("aucun", defective_keywords_2_fr, sep = " "))

defective_keywords_it <- c("spia", "rumore", "difetto", "non parte", "non si avvia", "rotto", "per l'esportazione", "per export", "danneggiato", "danneggiare", "danneggia", "difettoso", "non in buone condizioni", "non funziona più")
defective_keywords_2_it <- c("danni", "problemi", "problema")
ok_keywords_it <- c(paste("nessun", defective_keywords_2_it, sep = " "), paste("senza", defective_keywords_2_it, sep = " "))

defective_keywords_en <- c("defective", "does not start", "won't start", "broken", "light on", "for export", "noise", "faulty", "not working", "no longer working")
defective_keywords_2_en <- c("damage", "damaged", "problem", "problems")
ok_keywords_en <- c(paste("no", defective_keywords_2_en, sep = " "), paste("without", defective_keywords_2_en, sep = " "), paste("not", defective_keywords_2_en, sep = " "))

# We create vectors for the keywords

defective_keywords <- c(defective_keywords_de, defective_keywords_fr, defective_keywords_it, defective_keywords_en)
defective_keywords_2 <- c(defective_keywords_2_de, defective_keywords_2_fr, defective_keywords_2_it, defective_keywords_2_en)
ok_keywords <- c(ok_keywords_de, ok_keywords_fr, ok_keywords_it, ok_keywords_en)

# We add the column "defective".

data$defective <- logical(nrow(data))

# We set to true if any keyword from defective_keywords_2 (susceptible to be a false positive) is in the subtitle column or description.text column.

for (keyword in defective_keywords_2) {
  data$defective <- data$defective | grepl(keyword, data$description.text, ignore.case = TRUE)
}

for (keyword in defective_keywords_2) {
  data$defective <- data$defective | grepl(keyword, data$subtitle, ignore.case = TRUE)
}

# We set to FALSE all the TRUE values that contain a keyword in ok_keywords.

for (keyword in ok_keywords) {
  data$defective <- data$defective & !grepl(keyword, data$description.text, ignore.case = TRUE)
}

for (keyword in ok_keywords) {
  data$defective <- data$defective & !grepl(keyword, data$subtitle, ignore.case = TRUE)
}

# We set to TRUE if any keyword from defective_keywords are in the subtitle or description.text columns.

for (keyword in defective_keywords) {
  data$defective <- data$defective | grepl(keyword, data$description.text, ignore.case = TRUE)
}

for (keyword in defective_keywords) {
  data$defective <- data$defective | grepl(keyword, data$subtitle, ignore.case = TRUE)
}

# We set to defective to TRUE where the column accident is TRUE.

data$defective[data$accident] <- TRUE
```

We set to NA if values are "-" in the fuel.type, transmission and drivetrain columns.


```{r, message=FALSE, warning=FALSE, results='hide'}
### We set to NA if values are "-" in columns fuel.type, transmission and drivetrain.

data$fuel.type <- na_if(data$fuel.type, "-")
data$transmission <- na_if(data$transmission, "-")
data$drivetrain <- na_if(data$drivetrain, "-")
```

We created the columns vehicle.age and listing.age to be able to model without using dates. The unit of measurement is days.

<p align="justify">
We defined scraping_date which is the date of the most recently created listing, we assumed this corresponds to the scraping date since there are many listings posted each day for our data sets.
<p>

```{r, message=FALSE, warning=FALSE, results='hide'}
### We will create the columns vehicle.age and listing.age to be able to model without using dates. The unit of measurement will be days.

# We define scraping_date which is the date of the most recently created listing (we assume this corresponds to the scraping date since there are many listings posted each day for our data sets).

scraping_date <- data$created.date[order(data$created.date, decreasing = TRUE)[1]]

data$vehicle.age <- scraping_date - data$date
data$listing.age <- scraping_date - data$created.date

# One duplicate was found randomly when browsing the data (listing.id are different, the author might have created a second listing for the same vehicle), we remove it.

data <- data[-2703,]

# We remove the defective vehicles from our cleaned data

data <- data[data$defective == FALSE,]

### Finally we export the data to our cleaned-data folder

write.csv(data, file = "~/GitHub/Data_science/cleaned-data/golf2_cleaned.csv", row.names = FALSE)
```

<p align="justify">
We then repeated the process for each model, and fixed errors that were specific to those models.
<p>

```{r, message=FALSE, warning=FALSE, results='hide'}
### We load the necessary libraries to clean our data

library(tidyverse)
library(lubridate)

### We set our working directory to the data folder and load our dataset golf2

setwd("./data")
data <- read.csv("audi2.csv")
audi2 <- read.csv("audi2.csv")

### We will start by keeping only the numbers in the columns "price", "kilometers" and "listing.id"

data$price <- parse_number(data$price, locale = locale(grouping_mark = "'"))
data$kilometers <- parse_number(data$kilometers, locale = locale(grouping_mark = "'"))
data$listing.id <- parse_number(data$listing.id)

### We keep only the first number in "consumption" and get rid of "l/100km" and set "-" to "NA"

data$consumption <- na_if(data$consumption, "-")
data$consumption <- parse_number(data$consumption)

### We see that there are some outliers that shouldn't be here. The values jump from 11.6 l/100km to 160 l/100km. These are probably errors when scraping the data, the scraping software has maybe taken another field's value when the consumption field was blank.

unique(data$consumption[order(data$consumption)])
data$consumption[data$consumption > 12] <- NA

# We can easily see all the unique values and the duplicate count with this code:

#as.tibble(data$consumption) |>
#  group_by_all() |>
#  count() |>
#  print(n = 77)

### Now let's do the same for column "power". We will keep the unit of measurement horsepower instead of kW.

data$power <- na_if(data$power, "-")
data$power <- parse_number(data$power)

### We will now change the "Oui"/"Non" values in the column "expertise" to logical values TRUE/FALSE

data$expertise[data$expertise == "Non"] <- FALSE
data$expertise[data$expertise == "Oui"] <- TRUE
data$expertise <- as.logical(data$expertise)

### Let's do the same for columns "accident" and "warranty".

data$accident[data$accident == "Non"] <- FALSE
data$accident[data$accident == "Oui"] <- TRUE
data$accident <- as.logical(data$accident)

data$warranty[data$warranty == "Non"] <- FALSE
data$warranty[data$warranty == "Oui"] <- TRUE
data$warranty <- as.logical(data$warranty)

### We will now fix the column "new.price" by setting values "Oui"/"Non" (Errors when scraping) to NA, then we will parse numbers from the remaining columns.

data$new.price <- na_if(data$new.price, "Oui")
data$new.price <- na_if(data$new.price, "Non")

data$new.price <- parse_number(data$new.price, locale = locale(grouping_mark = "'"))

### If we look at the unique values we can see some unrealistic new car prices, notably 1, 54 and 4309. We will assume these are errors and remove them.

unique(data$new.price[order(data$new.price)])
data$new.price[data$new.price < 5000] <- NA

### Let's drop some columns that have meaningless information, and that are a result of scraping the data. We will drop columns "web.scraper.order", "web.scraper.start.url", "page" and "annonce.link".

data <- data %>% select(-web.scraper.order, -web.scraper.start.url, -page, -annonce.link)

### Now we want to set the "date" column to class "Date" to simplify plotting. To do this we need to format the values as yyyy.mm.dd, they are currently at mm.yyyy.

# Let's look at the data first

unique(data$date[order(data$date)])

# We remove one visible error

#data$date[2802] <- NA

# Now we set the format to mm.yyyy (the vector needs to be a character vector for the parse_date function to work) then parse date. The final format is yyyy-mm-dd.

data$date <- data$date |>
  format(format = "%m.%Y") |>
  parse_date(format = "%m.%Y")

### We set expertise.date and created.date to date classes as well

data$created.date <- parse_date(data$created.date)

data$expertise.date <- data$expertise.date |>
  format(format = "%d.%m.%Y") |>
  parse_date(format = "%d.%m.%Y")

### We will now add a column to the data where values will be TRUE where the vehicle is potentially defective or in need of repairs, and FALSE if not. 
### We will need to remove these defective vehicles when creating our model because they could bias it, making it underestimate prices for functioning vehicles.
### We plan to identify defective vehicles in two ways. The first way being the "accident" column, which is TRUE if the seller has flagged the vehicle as having been in an accident in the past, and FALSE if not.
### The second way will be to look for keywords in columns "title", "subtitle" and "description.text" which are common in listings with defective vehicles, such as "defekt", "motor startet nicht" etc.
### We will create a column where values will be TRUE if one of these keywords or key phrases is detected, and FALSE if not.
### If either of these two identifiers are TRUE, the vehicle will be deemed defective and not eligible to serve as data for creating our model.

# First we create a vector of characters which are the defective keywords.

defective_keywords_de <- c("defekt", "defect", "defeckt", "startet nicht", "starttet nicht", "gebrochen", "lampe leuchtet", "für export", "fur export", "gerausche", "geräusche", "gerräusche", "angebrochen", "angeschlagen", "beschädigt", "fehlerhaft", "lädiert", "nicht in Ordnung", "nicht mehr funktionierend", "nicht mehr gut", "schadhaft", "zerbrochen", "zerrissen", "kaputt" )

# We create a second list where the keywords are likely to have negation before them, so as to not falsely flag vehicles as defective. 
# We will then create an "ok" keywords vector that overpower the second defective keywords vector.

defective_keywords_2_de <- c("schäden", "problem", "schade", "probleme", "schaden")
ok_keywords_de <- c(paste("ohne", defective_keywords_2_de, sep = " "), paste("kein", defective_keywords_2_de, sep = " "), paste("keine", defective_keywords_2_de, sep = " "))

#We repeat these steps for other languages that listings could be in (French, Italian and English).

defective_keywords_fr <- c("témoin", "bruit", "défaut", "ne démarre pas", "cassé", "pour export", "pour l'export", "endommagé", "endommager", "endommage", "défectueux", "defectueux", "pas en bon état", "ne fonctionne plus", "cassé")
defective_keywords_2_fr <- c("dégâts", "dégats", "degâts", "degats", "problème", "probleme", "dommages")
ok_keywords_fr <- c(paste("sans", defective_keywords_2_fr, sep = " "), paste("pas de", defective_keywords_2_fr, sep = " "), paste("aucun", defective_keywords_2_fr, sep = " "))

defective_keywords_it <- c("spia", "rumore", "difetto", "non parte", "non si avvia", "rotto", "per l'esportazione", "per export", "danneggiato", "danneggiare", "danneggia", "difettoso", "non in buone condizioni", "non funziona più")
defective_keywords_2_it <- c("danni", "problemi", "problema")
ok_keywords_it <- c(paste("nessun", defective_keywords_2_it, sep = " "), paste("senza", defective_keywords_2_it, sep = " "))

defective_keywords_en <- c("defective", "does not start", "won't start", "broken", "light on", "for export", "noise", "faulty", "not working", "no longer working")
defective_keywords_2_en <- c("damage", "damaged", "problem", "problems")
ok_keywords_en <- c(paste("no", defective_keywords_2_en, sep = " "), paste("without", defective_keywords_2_en, sep = " "), paste("not", defective_keywords_2_en, sep = " "))

# We create vectors for the keywords

defective_keywords <- c(defective_keywords_de, defective_keywords_fr, defective_keywords_it, defective_keywords_en)
defective_keywords_2 <- c(defective_keywords_2_de, defective_keywords_2_fr, defective_keywords_2_it, defective_keywords_2_en)
ok_keywords <- c(ok_keywords_de, ok_keywords_fr, ok_keywords_it, ok_keywords_en)

# We add the column "defective".

data$defective <- logical(nrow(data))

# We set to true if any keyword from defective_keywords_2 (susceptible to be a false positive) is in the subtitle column or description.text column.

for (keyword in defective_keywords_2) {
  data$defective <- data$defective | grepl(keyword, data$description.text, ignore.case = TRUE)
}

for (keyword in defective_keywords_2) {
  data$defective <- data$defective | grepl(keyword, data$subtitle, ignore.case = TRUE)
}

# We set to FALSE all the TRUE values that contain a keyword in ok_keywords.

for (keyword in ok_keywords) {
  data$defective <- data$defective & !grepl(keyword, data$description.text, ignore.case = TRUE)
}

for (keyword in ok_keywords) {
  data$defective <- data$defective & !grepl(keyword, data$subtitle, ignore.case = TRUE)
}

# We set to TRUE if any keyword from defective_keywords are in the subtitle or description.text columns.

for (keyword in defective_keywords) {
  data$defective <- data$defective | grepl(keyword, data$description.text, ignore.case = TRUE)
}

for (keyword in defective_keywords) {
  data$defective <- data$defective | grepl(keyword, data$subtitle, ignore.case = TRUE)
}

# We set to defective to TRUE where the column accident is TRUE.

data$defective[data$accident] <- TRUE

### We set to NA if values are "-" in columns fuel.type, transmission and drivetrain.

data$fuel.type <- na_if(data$fuel.type, "-")
data$transmission <- na_if(data$transmission, "-")
data$drivetrain <- na_if(data$drivetrain, "-")

### We will create the columns vehicle.age and listing.age to be able to model without using dates. The unit of measurement will be days.

# We define scraping_date which is the date of the most recently created listing (we assume this corresponds to the scraping date since there are many listings posted each day for our data sets).

scraping_date <- data$created.date[order(data$created.date, decreasing = TRUE)[1]]

data$vehicle.age <- scraping_date - data$date
data$listing.age <- scraping_date - data$created.date

# We remove the defective vehicles from our cleaned data

data <- data[data$defective == FALSE,]

### Finally we export the data to our cleaned-data folder

write.csv(data, file = "~/GitHub/Data_science/cleaned-data/audi2_cleaned.csv", row.names = FALSE)

```

```{r, message=FALSE, warning=FALSE, results='hide'}
### We load the necessary libraries to clean our data

library(tidyverse)
library(lubridate)

### We set our working directory to the data folder and load our dataset golf2

setwd("./data")
data <- read.csv("skoda2.csv")
skoda2 <- read.csv("skoda2.csv")

### We will start by keeping only the numbers in the columns "price", "kilometers" and "listing.id"

data$price <- parse_number(data$price, locale = locale(grouping_mark = "'"))
data$kilometers <- parse_number(data$kilometers, locale = locale(grouping_mark = "'"))
data$listing.id <- parse_number(data$listing.id)

### We keep only the first number in "consumption" and get rid of "l/100km" and set "-" to "NA"

data$consumption <- na_if(data$consumption, "-")
data$consumption <- parse_number(data$consumption)

### We see that there are some outliers that shouldn't be here. The values jump from 11.6 l/100km to 160 l/100km. These are probably errors when scraping the data, the scraping software has maybe taken another field's value when the consumption field was blank.

unique(data$consumption[order(data$consumption)])
data$consumption[data$consumption > 12] <- NA

# We can easily see all the unique values and the duplicate count with this code:

#as.tibble(data$consumption) |>
#  group_by_all() |>
#  count() |>
#  print(n = 77)

### Now let's do the same for column "power". We will keep the unit of measurement horsepower instead of kW.

data$power <- na_if(data$power, "-")
data$power <- parse_number(data$power)

### We will now change the "Oui"/"Non" values in the column "expertise" to logical values TRUE/FALSE

data$expertise[data$expertise == "Non"] <- FALSE
data$expertise[data$expertise == "Oui"] <- TRUE
data$expertise <- as.logical(data$expertise)

### Let's do the same for columns "accident" and "warranty".

data$accident[data$accident == "Non"] <- FALSE
data$accident[data$accident == "Oui"] <- TRUE
data$accident <- as.logical(data$accident)

data$warranty[data$warranty == "Non"] <- FALSE
data$warranty[data$warranty == "Oui"] <- TRUE
data$warranty <- as.logical(data$warranty)

### We will now fix the column "new.price" by setting values "Oui"/"Non" (Errors when scraping) to NA, then we will parse numbers from the remaining columns.

data$new.price <- na_if(data$new.price, "Oui")
data$new.price <- na_if(data$new.price, "Non")

data$new.price <- parse_number(data$new.price, locale = locale(grouping_mark = "'"))

### If we look at the unique values we can see some unrealistic new car prices, notably 1, 54 and 4309. We will assume these are errors and remove them.

unique(data$new.price[order(data$new.price)])
data$new.price[data$new.price < 5000] <- NA

### Let's drop some columns that have meaningless information, and that are a result of scraping the data. We will drop columns "web.scraper.order", "web.scraper.start.url", "page" and "annonce.link".

data <- data %>% select(-web.scraper.order, -web.scraper.start.url, -page, -annonce.link)

### Now we want to set the "date" column to class "Date" to simplify plotting. To do this we need to format the values as yyyy.mm.dd, they are currently at mm.yyyy.

# Let's look at the data first

unique(data$date[order(data$date)])

# We remove one visible error

data$date[1584] <- NA

# Now we set the format to mm.yyyy (the vector needs to be a character vector for the parse_date function to work) then parse date. The final format is yyyy-mm-dd.

data$date <- data$date |>
  format(format = "%m.%Y") |>
  parse_date(format = "%m.%Y")

### We set expertise.date and created.date to date classes as well

data$created.date <- parse_date(data$created.date)

data$expertise.date <- data$expertise.date |>
  format(format = "%d.%m.%Y") |>
  parse_date(format = "%d.%m.%Y")

### We will now add a column to the data where values will be TRUE where the vehicle is potentially defective or in need of repairs, and FALSE if not. 
### We will need to remove these defective vehicles when creating our model because they could bias it, making it underestimate prices for functioning vehicles.
### We plan to identify defective vehicles in two ways. The first way being the "accident" column, which is TRUE if the seller has flagged the vehicle as having been in an accident in the past, and FALSE if not.
### The second way will be to look for keywords in columns "title", "subtitle" and "description.text" which are common in listings with defective vehicles, such as "defekt", "motor startet nicht" etc.
### We will create a column where values will be TRUE if one of these keywords or key phrases is detected, and FALSE if not.
### If either of these two identifiers are TRUE, the vehicle will be deemed defective and not eligible to serve as data for creating our model.

# First we create a vector of characters which are the defective keywords.

defective_keywords_de <- c("defekt", "defect", "defeckt", "startet nicht", "starttet nicht", "gebrochen", "lampe leuchtet", "für export", "fur export", "gerausche", "geräusche", "gerräusche", "angebrochen", "angeschlagen", "beschädigt", "fehlerhaft", "lädiert", "nicht in Ordnung", "nicht mehr funktionierend", "nicht mehr gut", "schadhaft", "zerbrochen", "zerrissen", "kaputt" )

# We create a second list where the keywords are likely to have negation before them, so as to not falsely flag vehicles as defective. 
# We will then create an "ok" keywords vector that overpower the second defective keywords vector.

defective_keywords_2_de <- c("schäden", "problem", "schade", "probleme", "schaden")
ok_keywords_de <- c(paste("ohne", defective_keywords_2_de, sep = " "), paste("kein", defective_keywords_2_de, sep = " "), paste("keine", defective_keywords_2_de, sep = " "))

#We repeat these steps for other languages that listings could be in (French, Italian and English).

defective_keywords_fr <- c("témoin", "bruit", "défaut", "ne démarre pas", "cassé", "pour export", "pour l'export", "endommagé", "endommager", "endommage", "défectueux", "defectueux", "pas en bon état", "ne fonctionne plus", "cassé")
defective_keywords_2_fr <- c("dégâts", "dégats", "degâts", "degats", "problème", "probleme", "dommages")
ok_keywords_fr <- c(paste("sans", defective_keywords_2_fr, sep = " "), paste("pas de", defective_keywords_2_fr, sep = " "), paste("aucun", defective_keywords_2_fr, sep = " "))

defective_keywords_it <- c("spia", "rumore", "difetto", "non parte", "non si avvia", "rotto", "per l'esportazione", "per export", "danneggiato", "danneggiare", "danneggia", "difettoso", "non in buone condizioni", "non funziona più")
defective_keywords_2_it <- c("danni", "problemi", "problema")
ok_keywords_it <- c(paste("nessun", defective_keywords_2_it, sep = " "), paste("senza", defective_keywords_2_it, sep = " "))

defective_keywords_en <- c("defective", "does not start", "won't start", "broken", "light on", "for export", "noise", "faulty", "not working", "no longer working")
defective_keywords_2_en <- c("damage", "damaged", "problem", "problems")
ok_keywords_en <- c(paste("no", defective_keywords_2_en, sep = " "), paste("without", defective_keywords_2_en, sep = " "), paste("not", defective_keywords_2_en, sep = " "))

# We create vectors for the keywords

defective_keywords <- c(defective_keywords_de, defective_keywords_fr, defective_keywords_it, defective_keywords_en)
defective_keywords_2 <- c(defective_keywords_2_de, defective_keywords_2_fr, defective_keywords_2_it, defective_keywords_2_en)
ok_keywords <- c(ok_keywords_de, ok_keywords_fr, ok_keywords_it, ok_keywords_en)

# We add the column "defective".

data$defective <- logical(nrow(data))

# We set to true if any keyword from defective_keywords_2 (susceptible to be a false positive) is in the subtitle column or description.text column.

for (keyword in defective_keywords_2) {
  data$defective <- data$defective | grepl(keyword, data$description.text, ignore.case = TRUE)
}

for (keyword in defective_keywords_2) {
  data$defective <- data$defective | grepl(keyword, data$subtitle, ignore.case = TRUE)
}

# We set to FALSE all the TRUE values that contain a keyword in ok_keywords.

for (keyword in ok_keywords) {
  data$defective <- data$defective & !grepl(keyword, data$description.text, ignore.case = TRUE)
}

for (keyword in ok_keywords) {
  data$defective <- data$defective & !grepl(keyword, data$subtitle, ignore.case = TRUE)
}

# We set to TRUE if any keyword from defective_keywords are in the subtitle or description.text columns.

for (keyword in defective_keywords) {
  data$defective <- data$defective | grepl(keyword, data$description.text, ignore.case = TRUE)
}

for (keyword in defective_keywords) {
  data$defective <- data$defective | grepl(keyword, data$subtitle, ignore.case = TRUE)
}

# We set to defective to TRUE where the column accident is TRUE.

data$defective[data$accident] <- TRUE

### We set to NA if values are "-" in columns fuel.type, transmission and drivetrain.

data$fuel.type <- na_if(data$fuel.type, "-")
data$transmission <- na_if(data$transmission, "-")
data$drivetrain <- na_if(data$drivetrain, "-")

### We will create the columns vehicle.age and listing.age to be able to model without using dates. The unit of measurement will be days.

# We define scraping_date which is the date of the most recently created listing (we assume this corresponds to the scraping date since there are many listings posted each day for our data sets).

scraping_date <- data$created.date[order(data$created.date, decreasing = TRUE)[1]]

data$vehicle.age <- scraping_date - data$date
data$listing.age <- scraping_date - data$created.date

# We remove the defective vehicles from our cleaned data

data <- data[data$defective == FALSE,]

### Finally we export the data to our cleaned-data folder

write.csv(data, file = "~/GitHub/Data_science/cleaned-data/skoda2_cleaned.csv", row.names = FALSE)

```

```{r, message=FALSE, warning=FALSE, results='hide'}
### We load the necessary libraries to clean our data

library(tidyverse)
library(lubridate)

setwd("./data")
data <- read.csv("volvo2.csv")
volvo2 <- read.csv("volvo2.csv")

### We will start by keeping only the numbers in the columns "price", "kilometers" and "listing.id"

data$price <- parse_number(data$price, locale = locale(grouping_mark = "'"))
data$kilometers <- parse_number(data$kilometers, locale = locale(grouping_mark = "'"))
data$listing.id <- parse_number(data$listing.id)

### We only keep the first number in "consumption" and get rid of "l/100km" and set "-" to "NA"

data$consumption <- na_if(data$consumption, "-")
data$consumption <- parse_number(data$consumption)

### We see that there are some outliers that shouldn't be here. The values jump from 11.6 l/100km to 160 l/100km. These are probably errors when scraping the data, the scraping software has maybe taken another field's value when the consumption field was blank.

unique(data$consumption[order(data$consumption)])
data$consumption[data$consumption > 12] <- NA

### Now let's do the same for column "power". We will keep the unit of measurement horsepower instead of kW.

data$power <- na_if(data$power, "-")
data$power <- parse_number(data$power)

### We will now change the "Oui"/"Non" values in the column "expertise" to logical values TRUE/FALSE

data$expertise[data$expertise == "Non"] <- FALSE
data$expertise[data$expertise == "Oui"] <- TRUE
data$expertise <- as.logical(data$expertise)

### Let's do the same for columns "accident" and "warranty".

data$accident[data$accident == "Non"] <- FALSE
data$accident[data$accident == "Oui"] <- TRUE
data$accident <- as.logical(data$accident)

data$warranty[data$warranty == "Non"] <- FALSE
data$warranty[data$warranty == "Oui"] <- TRUE
data$warranty <- as.logical(data$warranty)

### We will now fix the column "new.price" by setting values "Oui"/"Non" (Errors when scraping) to NA, then we will parse numbers from the remaining columns.

data$new.price <- na_if(data$new.price, "Oui")
data$new.price <- na_if(data$new.price, "Non")
data$new.price <- parse_number(data$new.price, locale = locale(grouping_mark = "'"))

### If we look at the unique values we can see some unrealistic new car prices, notably 1, 54 and 4309. We will assume these are errors and remove them.

unique(data$new.price[order(data$new.price)])
data$new.price[data$new.price < 5000] <- NA

### Let's drop some columns that have meaningless information, and that are a result of scraping the data. We will drop columns "web.scraper.order", "web.scraper.start.url", "page" and "annonce.link".

data <- data[-c(1:4)]

### Now we want to set the "date" column to class "Date" to simplify plotting. To do this we need to format the values as yyyy.mm.dd, they are currently at mm.yyyy.

# Let's look at the data first

unique(data$date[order(data$date)])

# Now we set the format to mm.yyyy (the vector needs to be a character vector for the parse_date function to work) then parse date. The final format is yyyy-mm-dd.

data$date <- data$date |>
  format(format = "%m.%Y") |>
  parse_date(format = "%m.%Y")

### We set expertise.date and created.date to date classes as well

data$created.date <- parse_date(data$created.date)

data$expertise.date <- data$expertise.date |>
  format(format = "%d.%m.%Y") |>
  parse_date(format = "%d.%m.%Y")

### We will now add a column to the data where values will be TRUE where the vehicle is potentially defective or in need of repairs, and FALSE if not. 
### We will need to remove these defective vehicles when creating our model because they could bias it, making it underestimate prices for functioning vehicles.
### We plan to identify defective vehicles in two ways. The first way being the "accident" column, which is TRUE if the seller has flagged the vehicle as having been in an accident in the past, and FALSE if not.
### The second way will be to look for keywords in columns "title", "subtitle" and "description.text" which are common in listings with defective vehicles, such as "defekt", "motor startet nicht" etc.
### We will create a column where values will be TRUE if one of these keywords or key phrases is detected, and FALSE if not.
### If either of these two identifiers are TRUE, the vehicle will be deemed defective and not eligible to serve as data for creating our model.

# First we create a vector of characters which are the defective keywords.

defective_keywords_de <- c("defekt", "defect", "defeckt", "startet nicht", "starttet nicht", "gebrochen", "lampe leuchtet", "für export", "fur export", "gerausche", "geräusche", "gerräusche", "angebrochen", "angeschlagen", "beschädigt", "fehlerhaft", "lädiert", "nicht in Ordnung", "nicht mehr funktionierend", "nicht mehr gut", "schadhaft", "zerbrochen", "zerrissen", "kaputt" )

# We create a second list where the keywords are likely to have negation before them, so as to not falsely flag vehicles as defective. 
# We will then create an "ok" keywords vector that overpower the second defective keywords vector.

defective_keywords_2_de <- c("schäden", "problem", "schade", "probleme", "schaden")
ok_keywords_de <- c(paste("ohne", defective_keywords_2_de, sep = " "), paste("kein", defective_keywords_2_de, sep = " "), paste("keine", defective_keywords_2_de, sep = " "))

#We repeat these steps for other languages that listings could be in (French, Italian and English).

defective_keywords_fr <- c("témoin", "bruit", "défaut", "ne démarre pas", "cassé", "pour export", "pour l'export", "endommagé", "endommager", "endommage", "défectueux", "defectueux", "pas en bon état", "ne fonctionne plus", "cassé")
defective_keywords_2_fr <- c("dégâts", "dégats", "degâts", "degats", "problème", "probleme", "dommages")
ok_keywords_fr <- c(paste("sans", defective_keywords_2_fr, sep = " "), paste("pas de", defective_keywords_2_fr, sep = " "), paste("aucun", defective_keywords_2_fr, sep = " "))

defective_keywords_it <- c("spia", "rumore", "difetto", "non parte", "non si avvia", "rotto", "per l'esportazione", "per export", "danneggiato", "danneggiare", "danneggia", "difettoso", "non in buone condizioni", "non funziona più")
defective_keywords_2_it <- c("danni", "problemi", "problema")
ok_keywords_it <- c(paste("nessun", defective_keywords_2_it, sep = " "), paste("senza", defective_keywords_2_it, sep = " "))

defective_keywords_en <- c("defective", "does not start", "won't start", "broken", "light on", "for export", "noise", "faulty", "not working", "no longer working")
defective_keywords_2_en <- c("damage", "damaged", "problem", "problems")
ok_keywords_en <- c(paste("no", defective_keywords_2_en, sep = " "), paste("without", defective_keywords_2_en, sep = " "), paste("not", defective_keywords_2_en, sep = " "))

# We create vectors for the keywords

defective_keywords <- c(defective_keywords_de, defective_keywords_fr, defective_keywords_it, defective_keywords_en)
defective_keywords_2 <- c(defective_keywords_2_de, defective_keywords_2_fr, defective_keywords_2_it, defective_keywords_2_en)
ok_keywords <- c(ok_keywords_de, ok_keywords_fr, ok_keywords_it, ok_keywords_en)

# We add the column "defective".

data$defective <- logical(nrow(data))

# We set to true if any keyword from defective_keywords_2 (susceptible to be a false positive) is in the subtitle column or description.text column.

for (keyword in defective_keywords_2) {
  data$defective <- data$defective | grepl(keyword, data$description.text, ignore.case = TRUE)
}

for (keyword in defective_keywords_2) {
  data$defective <- data$defective | grepl(keyword, data$subtitle, ignore.case = TRUE)
}

# We set to FALSE all the TRUE values that contain a keyword in ok_keywords.

for (keyword in ok_keywords) {
  data$defective <- data$defective & !grepl(keyword, data$description.text, ignore.case = TRUE)
}

for (keyword in ok_keywords) {
  data$defective <- data$defective & !grepl(keyword, data$subtitle, ignore.case = TRUE)
}

# We set to TRUE if any keyword from defective_keywords are in the subtitle or description.text columns.

for (keyword in defective_keywords) {
  data$defective <- data$defective | grepl(keyword, data$description.text, ignore.case = TRUE)
}

for (keyword in defective_keywords) {
  data$defective <- data$defective | grepl(keyword, data$subtitle, ignore.case = TRUE)
}

# We set to defective to TRUE where the column accident is TRUE.

data$defective[data$accident] <- TRUE

### We set to NA if values are "-" in columns fuel.type, transmission and drivetrain.

data$fuel.type <- na_if(data$fuel.type, "-")
data$transmission <- na_if(data$transmission, "-")
data$drivetrain <- na_if(data$drivetrain, "-")

### We will create the columns vehicle.age and listing.age to be able to model without using dates. The unit of measurement will be days.

# We define scraping_date which is the date of the most recently created listing (we assume this corresponds to the scraping date since there are many listings posted each day for our data sets).

scraping_date <- data$created.date[order(data$created.date, decreasing = TRUE)[1]]

data$vehicle.age <- scraping_date - data$date
data$listing.age <- scraping_date - data$created.date

# We remove the defective vehicles from our cleaned data

data <- data[data$defective == FALSE,]

### Finally we export the data to our cleaned-data folder

write.csv(data, file = "~/GitHub/Data_science/cleaned-data/volvo2_cleaned.csv", row.names = FALSE)

```

```{r, message=FALSE, warning=FALSE, results='hide'}
### We load the necessary libraries to clean our data

library(tidyverse)
library(lubridate)

### We set our working directory to the data folder and load our dataset toyota

setwd("./data")
data <- read.csv("toyota.csv")
toyota <- read.csv("toyota.csv")

### We will start by keeping only the numbers in the columns "price", "kilometers" and "listing.id"

data$price <- parse_number(data$price, locale = locale(grouping_mark = "'"))
data$kilometers <- parse_number(data$kilometers, locale = locale(grouping_mark = "'"))
data$listing.id <- parse_number(data$listing.id)

### We keep only the first number in "consumption" and get rid of "l/100km" and set "-" to "NA"

data$consumption <- na_if(data$consumption, "-")
data$consumption <- parse_number(data$consumption)

### Now let's do the same for column "power". We will keep the unit of measurement horsepower instead of kW.

data$power <- na_if(data$power, "-")
data$power <- parse_number(data$power)

### We will now change the "Oui"/"Non" values in the column "expertise" to logical values TRUE/FALSE

data$expertise[data$expertise == "Non"] <- FALSE
data$expertise[data$expertise == "Oui"] <- TRUE
data$expertise <- as.logical(data$expertise)

### Let's do the same for columns "accident" and "warranty".

data$accident[data$accident == "Non"] <- FALSE
data$accident[data$accident == "Oui"] <- TRUE
data$accident <- as.logical(data$accident)

data$warranty[data$warranty == "Non"] <- FALSE
data$warranty[data$warranty == "Oui"] <- TRUE
data$warranty <- as.logical(data$warranty)

### We will now fix the column "new.price" by setting values "Oui"/"Non" (Errors when scraping) to NA, then we will parse numbers from the remaining columns.

data$new.price <- na_if(data$new.price, "Oui")
data$new.price <- na_if(data$new.price, "Non")
data$new.price <- parse_number(data$new.price, locale = locale(grouping_mark = "'"))

### If we look at the unique values we can see some unrealistic new car prices, notably 1, 54 and 4309. We will assume these are errors and remove them.

unique(data$new.price[order(data$new.price)])
data$new.price[data$new.price < 5000] <- NA

### Let's drop some columns that have meaningless information, and that are a result of scraping the data. We will drop columns "web.scraper.order", "web.scraper.start.url", "page" and "annonce.link".

data <- data[-c(1:4)]

### Now we want to set the "date" column to class "Date" to simplify plotting. To do this we need to format the values as yyyy.mm.dd, they are currently at mm.yyyy.

# Let's look at the data first

unique(data$date[order(data$date)])

# We remove one visible error

#data$date[2802] <- NA

# Now we set the format to mm.yyyy (the vector needs to be a character vector for the parse_date function to work) then parse date. The final format is yyyy-mm-dd.

data$date <- data$date |>
  format(format = "%m.%Y") |>
  parse_date(format = "%m.%Y")

### We set expertise.date and created.date to date classes as well

data$created.date <- parse_date(data$created.date)

data$expertise.date <- data$expertise.date |>
  format(format = "%d.%m.%Y") |>
  parse_date(format = "%d.%m.%Y")

### We will now add a column to the data where values will be TRUE where the vehicle is potentially defective or in need of repairs, and FALSE if not. 
### We will need to remove these defective vehicles when creating our model because they could bias it, making it underestimate prices for functioning vehicles.
### We plan to identify defective vehicles in two ways. The first way being the "accident" column, which is TRUE if the seller has flagged the vehicle as having been in an accident in the past, and FALSE if not.
### The second way will be to look for keywords in columns "title", "subtitle" and "description.text" which are common in listings with defective vehicles, such as "defekt", "motor startet nicht" etc.
### We will create a column where values will be TRUE if one of these keywords or key phrases is detected, and FALSE if not.
### If either of these two identifiers are TRUE, the vehicle will be deemed defective and not eligible to serve as data for creating our model.

# First we create a vector of characters which are the defective keywords.

defective_keywords_de <- c("defekt", "defect", "defeckt", "startet nicht", "starttet nicht", "gebrochen", "lampe leuchtet", "für export", "fur export", "gerausche", "geräusche", "gerräusche", "angebrochen", "angeschlagen", "beschädigt", "fehlerhaft", "lädiert", "nicht in Ordnung", "nicht mehr funktionierend", "nicht mehr gut", "schadhaft", "zerbrochen", "zerrissen", "kaputt" )

# We create a second list where the keywords are likely to have negation before them, so as to not falsely flag vehicles as defective. 
# We will then create an "ok" keywords vector that overpower the second defective keywords vector.

defective_keywords_2_de <- c("schäden", "problem", "schade", "probleme", "schaden")
ok_keywords_de <- c(paste("ohne", defective_keywords_2_de, sep = " "), paste("kein", defective_keywords_2_de, sep = " "), paste("keine", defective_keywords_2_de, sep = " "))

#We repeat these steps for other languages that listings could be in (French, Italian and English).

defective_keywords_fr <- c("témoin", "bruit", "défaut", "ne démarre pas", "cassé", "pour export", "pour l'export", "endommagé", "endommager", "endommage", "défectueux", "defectueux", "pas en bon état", "ne fonctionne plus", "cassé")
defective_keywords_2_fr <- c("dégâts", "dégats", "degâts", "degats", "problème", "probleme", "dommages")
ok_keywords_fr <- c(paste("sans", defective_keywords_2_fr, sep = " "), paste("pas de", defective_keywords_2_fr, sep = " "), paste("aucun", defective_keywords_2_fr, sep = " "))

defective_keywords_it <- c("spia", "rumore", "difetto", "non parte", "non si avvia", "rotto", "per l'esportazione", "per export", "danneggiato", "danneggiare", "danneggia", "difettoso", "non in buone condizioni", "non funziona più")
defective_keywords_2_it <- c("danni", "problemi", "problema")
ok_keywords_it <- c(paste("nessun", defective_keywords_2_it, sep = " "), paste("senza", defective_keywords_2_it, sep = " "))

defective_keywords_en <- c("defective", "does not start", "won't start", "broken", "light on", "for export", "noise", "faulty", "not working", "no longer working")
defective_keywords_2_en <- c("damage", "damaged", "problem", "problems")
ok_keywords_en <- c(paste("no", defective_keywords_2_en, sep = " "), paste("without", defective_keywords_2_en, sep = " "), paste("not", defective_keywords_2_en, sep = " "))

# We create vectors for the keywords

defective_keywords <- c(defective_keywords_de, defective_keywords_fr, defective_keywords_it, defective_keywords_en)
defective_keywords_2 <- c(defective_keywords_2_de, defective_keywords_2_fr, defective_keywords_2_it, defective_keywords_2_en)
ok_keywords <- c(ok_keywords_de, ok_keywords_fr, ok_keywords_it, ok_keywords_en)

# We add the column "defective".

data$defective <- logical(nrow(data))

# We set to true if any keyword from defective_keywords_2 (susceptible to be a false positive) is in the subtitle column or description.text column.

for (keyword in defective_keywords_2) {
  data$defective <- data$defective | grepl(keyword, data$description.text, ignore.case = TRUE)
}

for (keyword in defective_keywords_2) {
  data$defective <- data$defective | grepl(keyword, data$subtitle, ignore.case = TRUE)
}

# We set to FALSE all the TRUE values that contain a keyword in ok_keywords.

for (keyword in ok_keywords) {
  data$defective <- data$defective & !grepl(keyword, data$description.text, ignore.case = TRUE)
}

for (keyword in ok_keywords) {
  data$defective <- data$defective & !grepl(keyword, data$subtitle, ignore.case = TRUE)
}

# We set to TRUE if any keyword from defective_keywords are in the subtitle or description.text columns.

for (keyword in defective_keywords) {
  data$defective <- data$defective | grepl(keyword, data$description.text, ignore.case = TRUE)
}

for (keyword in defective_keywords) {
  data$defective <- data$defective | grepl(keyword, data$subtitle, ignore.case = TRUE)
}

# We set to defective to TRUE where the column accident is TRUE.

data$defective[data$accident] <- TRUE

### We set to NA if values are "-" in columns fuel.type, transmission and drivetrain.

data$fuel.type <- na_if(data$fuel.type, "-")
data$transmission <- na_if(data$transmission, "-")
data$drivetrain <- na_if(data$drivetrain, "-")

### We will create the columns vehicle.age and listing.age to be able to model without using dates. The unit of measurement will be days.

# We define scraping_date which is the date of the most recently created listing (we assume this corresponds to the scraping date since there are many listings posted each day for our data sets).

scraping_date <- data$created.date[order(data$created.date, decreasing = TRUE)[1]]

data$vehicle.age <- scraping_date - data$date
data$listing.age <- scraping_date - data$created.date

# We remove the defective vehicles from our cleaned data

data <- data[data$defective == FALSE,]

### Finally we export the data to our cleaned-data folder

write.csv(data, file = "~/GitHub/Data_science/cleaned-data/toyota_cleaned.csv", row.names = FALSE)

```

